// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.22.4
// source: pkg/pb/auth.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuthServiceServer is the server API for AuthService service.
// All implementations must embed UnimplementedAuthServiceServer
// for forward compatibility
type ChatServiceServer interface {
	UpdateUnreadForChat(reqData *RequestData) *ResponseData
	DeleteChat(reqData *RequestData) *ResponseData
	CheckAndCreateChat(reqData *RequestData) *ResponseData
	SendChatMessage(reqData *RequestData) *ResponseData
	CheckChatExist(reqData *RequestData) *ResponseData
	GetChatMsgDisplayList(reqData *RequestData) *ResponseData
	mustEmbedUnimplementedChatServiceServer()
}

type UnsafeChatServiceServer interface {
	mustEmbedUnimplementedChatServiceServer()
}

func RegisterChatServiceServer(s grpc.ServiceRegistrar, srv ChatServiceServer) {
	s.RegisterService(&ChatService_ServiceDesc, srv)
}

func (UnimplementedChatServiceServer) UpdateUnreadForChat(*RequestData) *ResponseData{
	return &ResponseData{
		IsError: true,
		Msg: "method UpdateUnreadForChat not implemented",
	}
}

func (UnimplementedChatServiceServer) DeleteChat(*RequestData) *ResponseData{
	return &ResponseData{
		IsError: true,
		Msg: "method DeleteChat not implemented",
	}
}

func (UnimplementedChatServiceServer) CheckAndCreateChat(*RequestData) *ResponseData{
	return &ResponseData{
		IsError: true,
		Msg: "method CheckAndCreateChat not implemented",
	}
}

func (UnimplementedChatServiceServer) SendChatMessage(*RequestData) *ResponseData{
	return &ResponseData{
		IsError: true,
		Msg: "method SendChatMessage not implemented",
	}
}

func (UnimplementedChatServiceServer) CheckChatExist(*RequestData) *ResponseData{
	return &ResponseData{
		IsError: true,
		Msg: "method CheckChatExist not implemented",
	}
}

func (UnimplementedChatServiceServer) GetChatMsgDisplayList(*RequestData) *ResponseData{
	return &ResponseData{
		IsError: true,
		Msg: "method GetChatMsgDisplayList not implemented",
	}
}

type UnimplementedChatServiceServer struct {
}

func (UnimplementedChatServiceServer) mustEmbedUnimplementedChatServiceServer() {}

func UpdateUnreadForChat_handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).UpdateUnreadForChat(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.ChatService/UpdateUnreadForChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).UpdateUnreadForChat(req.(*RequestData)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func DeleteChat_handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).DeleteChat(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.ChatService/DeleteChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).DeleteChat(req.(*RequestData)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func CheckAndCreateChat_handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).CheckAndCreateChat(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.ChatService/CheckAndCreateChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).CheckAndCreateChat(req.(*RequestData)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func SendChatMessage_handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).SendChatMessage(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.ChatService/SendChatMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).SendChatMessage(req.(*RequestData)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func CheckChatExist_handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).CheckChatExist(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.ChatService/CheckChatExist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).CheckChatExist(req.(*RequestData)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func GetChatMsgDisplayList_handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).GetChatMsgDisplayList(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.ChatService/GetChatMsgDisplayList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).GetChatMsgDisplayList(req.(*RequestData)), nil
	}
	return interceptor(ctx, in, info, handler)
}

// AuthService_ServiceDesc is the grpc.ServiceDesc for AuthService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth.ChatService",
	HandlerType: (*ChatServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateUnreadForChat",
			Handler:    UpdateUnreadForChat_handler,
		},
		{
			MethodName: "DeleteChat",
			Handler:    DeleteChat_handler,
		},
		{
			MethodName: "CheckAndCreateChat",
			Handler:    CheckAndCreateChat_handler,
		},
		{
			MethodName: "SendChatMessage",
			Handler:    SendChatMessage_handler,
		},
		{
			MethodName: "CheckChatExist",
			Handler:    CheckChatExist_handler,
		},
		{
			MethodName: "GetChatMsgDisplayList",
			Handler:    GetChatMsgDisplayList_handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/pb/chat.proto",
}
