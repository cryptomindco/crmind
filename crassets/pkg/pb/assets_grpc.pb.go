// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.22.4
// source: pkg/pb/auth.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuthServiceServer is the server API for AuthService service.
// All implementations must embed UnimplementedAuthServiceServer
// for forward compatibility
type AssetsServiceServer interface {
	CreateNewAddress(reqData *RequestData) *ResponseData
	SyncTransactions(reqData *RequestData) *ResponseData
	SendTradingRequest(reqData *RequestData) *ResponseData
	TransferAmount(reqData *RequestData) *ResponseData
	FilterTxHistory(reqData *RequestData) *ResponseData
	GetCodeListData(reqData *RequestData) *ResponseData
	GetAddressListData(reqData *RequestData) *ResponseData
	ConfirmAmount(reqData *RequestData) *ResponseData
	ConfirmWithdrawal(reqData *RequestData) *ResponseData
	UpdateNewLabel(reqData *RequestData) *ResponseData
	GetLastTxs(reqData *RequestData) *ResponseData
	CheckContactUser(reqData *RequestData) *ResponseData
	GetBalanceSummary(reqData *RequestData) *ResponseData
	GetAssetDBList(reqData *RequestData) *ResponseData
	GetUserAssetDB(reqData *RequestData) *ResponseData
	GetAddressList(reqData *RequestData) *ResponseData
	CountAddress(reqData *RequestData) *ResponseData
	CheckHasCodeList(reqData *RequestData) *ResponseData
	GetContactList(reqData *RequestData) *ResponseData
	FilterTxCode(reqData *RequestData) *ResponseData
	GetTxHistory(reqData *RequestData) *ResponseData
	FilterAddressList(reqData *RequestData) *ResponseData
	CheckAndCreateAccountToken(reqData *RequestData) *ResponseData
	FetchRate(reqData *RequestData) *ResponseData
	CheckAssetMatchWithUser(reqData *RequestData) *ResponseData
	CheckAddressMatchWithUser(reqData *RequestData) *ResponseData
	GetAddress(reqData *RequestData) *ResponseData
	ConfirmAddressAction(reqData *RequestData) *ResponseData
	CancelUrlCode(reqData *RequestData) *ResponseData
	mustEmbedUnimplementedAssetsServiceServer()
}

type UnsafeAssetsServiceServer interface {
	mustEmbedUnimplementedAssetsServiceServer()
}

func RegisterAssetsServiceServer(s grpc.ServiceRegistrar, srv AssetsServiceServer) {
	s.RegisterService(&AssetsService_ServiceDesc, srv)
}

func (UnimplementedAssetsServiceServer) CreateNewAddress(*RequestData) *ResponseData{
	return &ResponseData{
		IsError: true,
		Msg: "method CreateNewAddress not implemented",
	}
}

func (UnimplementedAssetsServiceServer) SyncTransactions(*RequestData) *ResponseData{
	return &ResponseData{
		IsError: true,
		Msg: "method SyncTransactions not implemented",
	}
}

func (UnimplementedAssetsServiceServer) SendTradingRequest(*RequestData) *ResponseData{
	return &ResponseData{
		IsError: true,
		Msg: "method SendTradingRequest not implemented",
	}
}

func (UnimplementedAssetsServiceServer) TransferAmount(*RequestData) *ResponseData{
	return &ResponseData{
		IsError: true,
		Msg: "method TransferAmount not implemented",
	}
}

func (UnimplementedAssetsServiceServer) FilterTxHistory(*RequestData) *ResponseData{
	return &ResponseData{
		IsError: true,
		Msg: "method FilterTxHistory not implemented",
	}
}

func (UnimplementedAssetsServiceServer) GetCodeListData(*RequestData) *ResponseData{
	return &ResponseData{
		IsError: true,
		Msg: "method GetCodeListData not implemented",
	}
}

func (UnimplementedAssetsServiceServer) GetAddressListData(*RequestData) *ResponseData{
	return &ResponseData{
		IsError: true,
		Msg: "method GetAddressListData not implemented",
	}
}

func (UnimplementedAssetsServiceServer) ConfirmAmount(*RequestData) *ResponseData{
	return &ResponseData{
		IsError: true,
		Msg: "method ConfirmAmount not implemented",
	}
}

func (UnimplementedAssetsServiceServer) ConfirmWithdrawal(*RequestData) *ResponseData{
	return &ResponseData{
		IsError: true,
		Msg: "method ConfirmWithdrawal not implemented",
	}
}

func (UnimplementedAssetsServiceServer) UpdateNewLabel(*RequestData) *ResponseData{
	return &ResponseData{
		IsError: true,
		Msg: "method UpdateNewLabel not implemented",
	}
}

func (UnimplementedAssetsServiceServer) GetLastTxs(*RequestData) *ResponseData{
	return &ResponseData{
		IsError: true,
		Msg: "method GetLastTxs not implemented",
	}
}

func (UnimplementedAssetsServiceServer) CheckContactUser(*RequestData) *ResponseData{
	return &ResponseData{
		IsError: true,
		Msg: "method CheckContactUser not implemented",
	}
}
func (UnimplementedAssetsServiceServer) GetBalanceSummary(*RequestData) *ResponseData{
	return &ResponseData{
		IsError: true,
		Msg: "method GetBalanceSummary not implemented",
	}
}

func (UnimplementedAssetsServiceServer) GetAssetDBList(*RequestData) *ResponseData{
	return &ResponseData{
		IsError: true,
		Msg: "method GetAssetDBList not implemented",
	}
}

func (UnimplementedAssetsServiceServer) GetUserAssetDB(*RequestData) *ResponseData{
	return &ResponseData{
		IsError: true,
		Msg: "method GetUserAssetDB not implemented",
	}
}

func (UnimplementedAssetsServiceServer) GetAddressList(*RequestData) *ResponseData{
	return &ResponseData{
		IsError: true,
		Msg: "method GetAddressList not implemented",
	}
}

func (UnimplementedAssetsServiceServer) CountAddress(*RequestData) *ResponseData{
	return &ResponseData{
		IsError: true,
		Msg: "method CountAddress not implemented",
	}
}

func (UnimplementedAssetsServiceServer) CheckHasCodeList(*RequestData) *ResponseData{
	return &ResponseData{
		IsError: true,
		Msg: "method CheckHasCodeList not implemented",
	}
}

func (UnimplementedAssetsServiceServer) GetContactList(*RequestData) *ResponseData{
	return &ResponseData{
		IsError: true,
		Msg: "method GetContactList not implemented",
	}
}

func (UnimplementedAssetsServiceServer) FilterTxCode(*RequestData) *ResponseData{
	return &ResponseData{
		IsError: true,
		Msg: "method FilterTxCode not implemented",
	}
}

func (UnimplementedAssetsServiceServer) GetTxHistory(*RequestData) *ResponseData{
	return &ResponseData{
		IsError: true,
		Msg: "method GetTxHistory not implemented",
	}
}

func (UnimplementedAssetsServiceServer) FilterAddressList(*RequestData) *ResponseData{
	return &ResponseData{
		IsError: true,
		Msg: "method FilterAddressList not implemented",
	}
}

func (UnimplementedAssetsServiceServer) CheckAndCreateAccountToken(*RequestData) *ResponseData{
	return &ResponseData{
		IsError: true,
		Msg: "method CheckAndCreateAccountToken not implemented",
	}
}

func (UnimplementedAssetsServiceServer) FetchRate(*RequestData) *ResponseData{
	return &ResponseData{
		IsError: true,
		Msg: "method FetchRate not implemented",
	}
}

func (UnimplementedAssetsServiceServer) CheckAssetMatchWithUser(*RequestData) *ResponseData{
	return &ResponseData{
		IsError: true,
		Msg: "method CheckAssetMatchWithUser not implemented",
	}
}

func (UnimplementedAssetsServiceServer) CheckAddressMatchWithUser(*RequestData) *ResponseData{
	return &ResponseData{
		IsError: true,
		Msg: "method CheckAddressMatchWithUser not implemented",
	}
}

func (UnimplementedAssetsServiceServer) GetAddress(*RequestData) *ResponseData{
	return &ResponseData{
		IsError: true,
		Msg: "method GetAddress not implemented",
	}
}

func (UnimplementedAssetsServiceServer) ConfirmAddressAction(*RequestData) *ResponseData{
	return &ResponseData{
		IsError: true,
		Msg: "method ConfirmAddressAction not implemented",
	}
}

func (UnimplementedAssetsServiceServer) CancelUrlCode(*RequestData) *ResponseData{
	return &ResponseData{
		IsError: true,
		Msg: "method CancelUrlCode not implemented",
	}
}

type UnimplementedAssetsServiceServer struct {
}

func (UnimplementedAssetsServiceServer) mustEmbedUnimplementedAssetsServiceServer() {}

func CreateNewAddress_handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetsServiceServer).CreateNewAddress(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assets.AssetsService/CreateNewAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetsServiceServer).CreateNewAddress(req.(*RequestData)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func SyncTransactions_handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetsServiceServer).SyncTransactions(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assets.AssetsService/SyncTransactions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetsServiceServer).SyncTransactions(req.(*RequestData)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func SendTradingRequest_handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetsServiceServer).SendTradingRequest(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assets.AssetsService/SendTradingRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetsServiceServer).SendTradingRequest(req.(*RequestData)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func TransferAmount_handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetsServiceServer).TransferAmount(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assets.AssetsService/TransferAmount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetsServiceServer).TransferAmount(req.(*RequestData)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func FilterTxHistory_handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetsServiceServer).FilterTxHistory(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assets.AssetsService/FilterTxHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetsServiceServer).FilterTxHistory(req.(*RequestData)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func GetCodeListData_handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetsServiceServer).GetCodeListData(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assets.AssetsService/GetCodeListData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetsServiceServer).GetCodeListData(req.(*RequestData)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func GetAddressListData_handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetsServiceServer).GetAddressListData(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assets.AssetsService/GetAddressListData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetsServiceServer).GetAddressListData(req.(*RequestData)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func ConfirmAmount_handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetsServiceServer).ConfirmAmount(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assets.AssetsService/ConfirmAmount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetsServiceServer).ConfirmAmount(req.(*RequestData)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func ConfirmWithdrawal_handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetsServiceServer).ConfirmWithdrawal(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assets.AssetsService/ConfirmWithdrawal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetsServiceServer).ConfirmWithdrawal(req.(*RequestData)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func UpdateNewLabel_handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetsServiceServer).UpdateNewLabel(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assets.AssetsService/UpdateNewLabel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetsServiceServer).UpdateNewLabel(req.(*RequestData)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func GetLastTxs_handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetsServiceServer).GetLastTxs(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assets.AssetsService/GetLastTxs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetsServiceServer).GetLastTxs(req.(*RequestData)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func CheckContactUser_handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetsServiceServer).CheckContactUser(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assets.AssetsService/CheckContactUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetsServiceServer).CheckContactUser(req.(*RequestData)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func GetBalanceSummary_handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetsServiceServer).GetBalanceSummary(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assets.AssetsService/GetBalanceSummary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetsServiceServer).GetBalanceSummary(req.(*RequestData)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func GetAssetDBList_handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetsServiceServer).GetAssetDBList(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assets.AssetsService/GetAssetDBList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetsServiceServer).GetAssetDBList(req.(*RequestData)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func GetUserAssetDB_handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetsServiceServer).GetUserAssetDB(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assets.AssetsService/GetUserAssetDB",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetsServiceServer).GetUserAssetDB(req.(*RequestData)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func GetAddressList_handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetsServiceServer).GetAddressList(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assets.AssetsService/GetAddressList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetsServiceServer).GetAddressList(req.(*RequestData)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func CountAddress_handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetsServiceServer).CountAddress(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assets.AssetsService/CountAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetsServiceServer).CountAddress(req.(*RequestData)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func CheckHasCodeList_handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetsServiceServer).CheckHasCodeList(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assets.AssetsService/CheckHasCodeList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetsServiceServer).CheckHasCodeList(req.(*RequestData)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func GetContactList_handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetsServiceServer).GetContactList(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assets.AssetsService/GetContactList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetsServiceServer).GetContactList(req.(*RequestData)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func FilterTxCode_handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetsServiceServer).FilterTxCode(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assets.AssetsService/FilterTxCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetsServiceServer).FilterTxCode(req.(*RequestData)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func GetTxHistory_handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetsServiceServer).GetTxHistory(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assets.AssetsService/GetTxHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetsServiceServer).GetTxHistory(req.(*RequestData)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func FilterAddressList_handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetsServiceServer).FilterAddressList(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assets.AssetsService/FilterAddressList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetsServiceServer).FilterAddressList(req.(*RequestData)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func CheckAndCreateAccountToken_handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetsServiceServer).CheckAndCreateAccountToken(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assets.AssetsService/CheckAndCreateAccountToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetsServiceServer).CheckAndCreateAccountToken(req.(*RequestData)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func FetchRate_handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetsServiceServer).FetchRate(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assets.AssetsService/FetchRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetsServiceServer).FetchRate(req.(*RequestData)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func CheckAssetMatchWithUser_handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetsServiceServer).CheckAssetMatchWithUser(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assets.AssetsService/CheckAssetMatchWithUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetsServiceServer).CheckAssetMatchWithUser(req.(*RequestData)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func CheckAddressMatchWithUser_handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetsServiceServer).CheckAddressMatchWithUser(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assets.AssetsService/CheckAddressMatchWithUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetsServiceServer).CheckAddressMatchWithUser(req.(*RequestData)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func GetAddress_handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetsServiceServer).GetAddress(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assets.AssetsService/GetAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetsServiceServer).GetAddress(req.(*RequestData)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func ConfirmAddressAction_handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetsServiceServer).ConfirmAddressAction(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assets.AssetsService/ConfirmAddressAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetsServiceServer).ConfirmAddressAction(req.(*RequestData)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func CancelUrlCode_handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetsServiceServer).CancelUrlCode(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assets.AssetsService/CancelUrlCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetsServiceServer).CancelUrlCode(req.(*RequestData)), nil
	}
	return interceptor(ctx, in, info, handler)
}



// AuthService_ServiceDesc is the grpc.ServiceDesc for AuthService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AssetsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "assets.AssetsService",
	HandlerType: (*AssetsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNewAddress",
			Handler:    CreateNewAddress_handler,
		},
		{
			MethodName: "SyncTransactions",
			Handler:    SyncTransactions_handler,
		},
		{
			MethodName: "SendTradingRequest",
			Handler:    SendTradingRequest_handler,
		},
		{
			MethodName: "TransferAmount",
			Handler:    TransferAmount_handler,
		},
		{
			MethodName: "FilterTxHistory",
			Handler:    FilterTxHistory_handler,
		},
		{
			MethodName: "GetCodeListData",
			Handler:    GetCodeListData_handler,
		},
		{
			MethodName: "GetAddressListData",
			Handler:    GetAddressListData_handler,
		},
		{
			MethodName: "ConfirmAmount",
			Handler:    ConfirmAmount_handler,
		},
		{
			MethodName: "ConfirmWithdrawal",
			Handler:    ConfirmWithdrawal_handler,
		},
		{
			MethodName: "UpdateNewLabel",
			Handler:    UpdateNewLabel_handler,
		},
		{
			MethodName: "GetLastTxs",
			Handler:    GetLastTxs_handler,
		},
		{
			MethodName: "CheckContactUser",
			Handler:    CheckContactUser_handler,
		},
		{
			MethodName: "GetBalanceSummary",
			Handler:    GetBalanceSummary_handler,
		},
		{
			MethodName: "GetAssetDBList",
			Handler:    GetAssetDBList_handler,
		},
		{
			MethodName: "GetUserAssetDB",
			Handler:    GetUserAssetDB_handler,
		},
		{
			MethodName: "GetAddressList",
			Handler:    GetAddressList_handler,
		},
		{
			MethodName: "CountAddress",
			Handler:    CountAddress_handler,
		},
		{
			MethodName: "CheckHasCodeList",
			Handler:    CheckHasCodeList_handler,
		},
		{
			MethodName: "GetContactList",
			Handler:    GetContactList_handler,
		},
		{
			MethodName: "FilterTxCode",
			Handler:    FilterTxCode_handler,
		},
		{
			MethodName: "GetTxHistory",
			Handler:    GetTxHistory_handler,
		},
		{
			MethodName: "FilterAddressList",
			Handler:    FilterAddressList_handler,
		},
		{
			MethodName: "CheckAndCreateAccountToken",
			Handler:    CheckAndCreateAccountToken_handler,
		},
		{
			MethodName: "FetchRate",
			Handler:    FetchRate_handler,
		},
		{
			MethodName: "CheckAssetMatchWithUser",
			Handler:    CheckAssetMatchWithUser_handler,
		},
		{
			MethodName: "CheckAddressMatchWithUser",
			Handler:    CheckAddressMatchWithUser_handler,
		},
		{
			MethodName: "GetAddress",
			Handler:    GetAddress_handler,
		},
		{
			MethodName: "ConfirmAddressAction",
			Handler:    ConfirmAddressAction_handler,
		},
		{
			MethodName: "CancelUrlCode",
			Handler:    CancelUrlCode_handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/pb/assets.proto",
}
