// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.6.1
// source: assets.proto

package assetspb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AssetsService_CreateNewAddress_FullMethodName                   = "/assets.AssetsService/CreateNewAddress"
	AssetsService_SyncTransactions_FullMethodName                   = "/assets.AssetsService/SyncTransactions"
	AssetsService_SendTradingRequest_FullMethodName                 = "/assets.AssetsService/SendTradingRequest"
	AssetsService_TransferAmount_FullMethodName                     = "/assets.AssetsService/TransferAmount"
	AssetsService_AddToContact_FullMethodName                       = "/assets.AssetsService/AddToContact"
	AssetsService_FilterTxHistory_FullMethodName                    = "/assets.AssetsService/FilterTxHistory"
	AssetsService_GetCodeListData_FullMethodName                    = "/assets.AssetsService/GetCodeListData"
	AssetsService_GetAddressListDataWithStatus_FullMethodName       = "/assets.AssetsService/GetAddressListDataWithStatus"
	AssetsService_ConfirmAmount_FullMethodName                      = "/assets.AssetsService/ConfirmAmount"
	AssetsService_ConfirmWithdrawal_FullMethodName                  = "/assets.AssetsService/ConfirmWithdrawal"
	AssetsService_UpdateNewLabel_FullMethodName                     = "/assets.AssetsService/UpdateNewLabel"
	AssetsService_GetBalanceSummary_FullMethodName                  = "/assets.AssetsService/GetBalanceSummary"
	AssetsService_GetAssetDBList_FullMethodName                     = "/assets.AssetsService/GetAssetDBList"
	AssetsService_GetUserAssetDB_FullMethodName                     = "/assets.AssetsService/GetUserAssetDB"
	AssetsService_GetAddressList_FullMethodName                     = "/assets.AssetsService/GetAddressList"
	AssetsService_CountAddress_FullMethodName                       = "/assets.AssetsService/CountAddress"
	AssetsService_CheckHasCodeList_FullMethodName                   = "/assets.AssetsService/CheckHasCodeList"
	AssetsService_GetContactList_FullMethodName                     = "/assets.AssetsService/GetContactList"
	AssetsService_FilterTxCode_FullMethodName                       = "/assets.AssetsService/FilterTxCode"
	AssetsService_GetTxHistory_FullMethodName                       = "/assets.AssetsService/GetTxHistory"
	AssetsService_FilterAddressList_FullMethodName                  = "/assets.AssetsService/FilterAddressList"
	AssetsService_CheckAndCreateAccountToken_FullMethodName         = "/assets.AssetsService/CheckAndCreateAccountToken"
	AssetsService_FetchRate_FullMethodName                          = "/assets.AssetsService/FetchRate"
	AssetsService_CheckAssetMatchWithUser_FullMethodName            = "/assets.AssetsService/CheckAssetMatchWithUser"
	AssetsService_CheckAddressMatchWithUser_FullMethodName          = "/assets.AssetsService/CheckAddressMatchWithUser"
	AssetsService_GetAddress_FullMethodName                         = "/assets.AssetsService/GetAddress"
	AssetsService_ConfirmAddressAction_FullMethodName               = "/assets.AssetsService/ConfirmAddressAction"
	AssetsService_CancelUrlCode_FullMethodName                      = "/assets.AssetsService/CancelUrlCode"
	AssetsService_CheckContactUser_FullMethodName                   = "/assets.AssetsService/CheckContactUser"
	AssetsService_TransactionDetail_FullMethodName                  = "/assets.AssetsService/TransactionDetail"
	AssetsService_AdminUpdateBalance_FullMethodName                 = "/assets.AssetsService/AdminUpdateBalance"
	AssetsService_GetTxCode_FullMethodName                          = "/assets.AssetsService/GetTxCode"
	AssetsService_HandlerURLCodeWithdrawlWithAccount_FullMethodName = "/assets.AssetsService/HandlerURLCodeWithdrawlWithAccount"
	AssetsService_CreateNewAsset_FullMethodName                     = "/assets.AssetsService/CreateNewAsset"
	AssetsService_WalletSocket_FullMethodName                       = "/assets.AssetsService/WalletSocket"
)

// AssetsServiceClient is the client API for AssetsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AssetsServiceClient interface {
	CreateNewAddress(ctx context.Context, in *OneStringRequest, opts ...grpc.CallOption) (*ResponseData, error)
	SyncTransactions(ctx context.Context, in *CommonRequest, opts ...grpc.CallOption) (*ResponseData, error)
	SendTradingRequest(ctx context.Context, in *SendTradingDataRequest, opts ...grpc.CallOption) (*ResponseData, error)
	TransferAmount(ctx context.Context, in *TransferAmountRequest, opts ...grpc.CallOption) (*ResponseData, error)
	AddToContact(ctx context.Context, in *OneStringRequest, opts ...grpc.CallOption) (*ResponseData, error)
	FilterTxHistory(ctx context.Context, in *FilterTxHistoryRequest, opts ...grpc.CallOption) (*ResponseData, error)
	GetCodeListData(ctx context.Context, in *GetCodeListRequest, opts ...grpc.CallOption) (*ResponseData, error)
	GetAddressListDataWithStatus(ctx context.Context, in *GetAddressListRequest, opts ...grpc.CallOption) (*ResponseData, error)
	ConfirmAmount(ctx context.Context, in *ConfirmAmountRequest, opts ...grpc.CallOption) (*ResponseData, error)
	ConfirmWithdrawal(ctx context.Context, in *ConfirmWithdrawalRequest, opts ...grpc.CallOption) (*ResponseData, error)
	UpdateNewLabel(ctx context.Context, in *UpdateLabelRequest, opts ...grpc.CallOption) (*ResponseData, error)
	GetBalanceSummary(ctx context.Context, in *OneStringRequest, opts ...grpc.CallOption) (*ResponseData, error)
	GetAssetDBList(ctx context.Context, in *GetAssetDBListRequest, opts ...grpc.CallOption) (*ResponseData, error)
	GetUserAssetDB(ctx context.Context, in *GetUserAssetDBRequest, opts ...grpc.CallOption) (*ResponseData, error)
	GetAddressList(ctx context.Context, in *OneIntegerRequest, opts ...grpc.CallOption) (*ResponseData, error)
	CountAddress(ctx context.Context, in *CountAddressRequest, opts ...grpc.CallOption) (*ResponseData, error)
	CheckHasCodeList(ctx context.Context, in *OneStringRequest, opts ...grpc.CallOption) (*ResponseData, error)
	GetContactList(ctx context.Context, in *CommonRequest, opts ...grpc.CallOption) (*ResponseData, error)
	FilterTxCode(ctx context.Context, in *FilterTxCodeRequest, opts ...grpc.CallOption) (*ResponseData, error)
	GetTxHistory(ctx context.Context, in *OneIntegerRequest, opts ...grpc.CallOption) (*ResponseData, error)
	FilterAddressList(ctx context.Context, in *FilterAddressListRequest, opts ...grpc.CallOption) (*ResponseData, error)
	CheckAndCreateAccountToken(ctx context.Context, in *CheckAndCreateAccountTokenRequest, opts ...grpc.CallOption) (*ResponseData, error)
	FetchRate(ctx context.Context, in *CommonRequest, opts ...grpc.CallOption) (*ResponseData, error)
	CheckAssetMatchWithUser(ctx context.Context, in *OneIntegerRequest, opts ...grpc.CallOption) (*ResponseData, error)
	CheckAddressMatchWithUser(ctx context.Context, in *CheckAddressMatchWithUserRequest, opts ...grpc.CallOption) (*ResponseData, error)
	GetAddress(ctx context.Context, in *OneIntegerRequest, opts ...grpc.CallOption) (*ResponseData, error)
	ConfirmAddressAction(ctx context.Context, in *ConfirmAddressActionRequest, opts ...grpc.CallOption) (*ResponseData, error)
	CancelUrlCode(ctx context.Context, in *OneIntegerRequest, opts ...grpc.CallOption) (*ResponseData, error)
	CheckContactUser(ctx context.Context, in *OneStringRequest, opts ...grpc.CallOption) (*ResponseData, error)
	TransactionDetail(ctx context.Context, in *OneIntegerRequest, opts ...grpc.CallOption) (*ResponseData, error)
	AdminUpdateBalance(ctx context.Context, in *AdminBalanceUpdateRequest, opts ...grpc.CallOption) (*ResponseData, error)
	GetTxCode(ctx context.Context, in *OneStringRequest, opts ...grpc.CallOption) (*ResponseData, error)
	HandlerURLCodeWithdrawlWithAccount(ctx context.Context, in *URLCodeWithdrawWithAccountRequest, opts ...grpc.CallOption) (*ResponseData, error)
	CreateNewAsset(ctx context.Context, in *OneStringRequest, opts ...grpc.CallOption) (*ResponseData, error)
	WalletSocket(ctx context.Context, in *WalletNotifyRequest, opts ...grpc.CallOption) (*ResponseData, error)
}

type assetsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAssetsServiceClient(cc grpc.ClientConnInterface) AssetsServiceClient {
	return &assetsServiceClient{cc}
}

func (c *assetsServiceClient) CreateNewAddress(ctx context.Context, in *OneStringRequest, opts ...grpc.CallOption) (*ResponseData, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseData)
	err := c.cc.Invoke(ctx, AssetsService_CreateNewAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetsServiceClient) SyncTransactions(ctx context.Context, in *CommonRequest, opts ...grpc.CallOption) (*ResponseData, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseData)
	err := c.cc.Invoke(ctx, AssetsService_SyncTransactions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetsServiceClient) SendTradingRequest(ctx context.Context, in *SendTradingDataRequest, opts ...grpc.CallOption) (*ResponseData, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseData)
	err := c.cc.Invoke(ctx, AssetsService_SendTradingRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetsServiceClient) TransferAmount(ctx context.Context, in *TransferAmountRequest, opts ...grpc.CallOption) (*ResponseData, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseData)
	err := c.cc.Invoke(ctx, AssetsService_TransferAmount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetsServiceClient) AddToContact(ctx context.Context, in *OneStringRequest, opts ...grpc.CallOption) (*ResponseData, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseData)
	err := c.cc.Invoke(ctx, AssetsService_AddToContact_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetsServiceClient) FilterTxHistory(ctx context.Context, in *FilterTxHistoryRequest, opts ...grpc.CallOption) (*ResponseData, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseData)
	err := c.cc.Invoke(ctx, AssetsService_FilterTxHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetsServiceClient) GetCodeListData(ctx context.Context, in *GetCodeListRequest, opts ...grpc.CallOption) (*ResponseData, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseData)
	err := c.cc.Invoke(ctx, AssetsService_GetCodeListData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetsServiceClient) GetAddressListDataWithStatus(ctx context.Context, in *GetAddressListRequest, opts ...grpc.CallOption) (*ResponseData, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseData)
	err := c.cc.Invoke(ctx, AssetsService_GetAddressListDataWithStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetsServiceClient) ConfirmAmount(ctx context.Context, in *ConfirmAmountRequest, opts ...grpc.CallOption) (*ResponseData, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseData)
	err := c.cc.Invoke(ctx, AssetsService_ConfirmAmount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetsServiceClient) ConfirmWithdrawal(ctx context.Context, in *ConfirmWithdrawalRequest, opts ...grpc.CallOption) (*ResponseData, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseData)
	err := c.cc.Invoke(ctx, AssetsService_ConfirmWithdrawal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetsServiceClient) UpdateNewLabel(ctx context.Context, in *UpdateLabelRequest, opts ...grpc.CallOption) (*ResponseData, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseData)
	err := c.cc.Invoke(ctx, AssetsService_UpdateNewLabel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetsServiceClient) GetBalanceSummary(ctx context.Context, in *OneStringRequest, opts ...grpc.CallOption) (*ResponseData, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseData)
	err := c.cc.Invoke(ctx, AssetsService_GetBalanceSummary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetsServiceClient) GetAssetDBList(ctx context.Context, in *GetAssetDBListRequest, opts ...grpc.CallOption) (*ResponseData, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseData)
	err := c.cc.Invoke(ctx, AssetsService_GetAssetDBList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetsServiceClient) GetUserAssetDB(ctx context.Context, in *GetUserAssetDBRequest, opts ...grpc.CallOption) (*ResponseData, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseData)
	err := c.cc.Invoke(ctx, AssetsService_GetUserAssetDB_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetsServiceClient) GetAddressList(ctx context.Context, in *OneIntegerRequest, opts ...grpc.CallOption) (*ResponseData, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseData)
	err := c.cc.Invoke(ctx, AssetsService_GetAddressList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetsServiceClient) CountAddress(ctx context.Context, in *CountAddressRequest, opts ...grpc.CallOption) (*ResponseData, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseData)
	err := c.cc.Invoke(ctx, AssetsService_CountAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetsServiceClient) CheckHasCodeList(ctx context.Context, in *OneStringRequest, opts ...grpc.CallOption) (*ResponseData, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseData)
	err := c.cc.Invoke(ctx, AssetsService_CheckHasCodeList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetsServiceClient) GetContactList(ctx context.Context, in *CommonRequest, opts ...grpc.CallOption) (*ResponseData, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseData)
	err := c.cc.Invoke(ctx, AssetsService_GetContactList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetsServiceClient) FilterTxCode(ctx context.Context, in *FilterTxCodeRequest, opts ...grpc.CallOption) (*ResponseData, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseData)
	err := c.cc.Invoke(ctx, AssetsService_FilterTxCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetsServiceClient) GetTxHistory(ctx context.Context, in *OneIntegerRequest, opts ...grpc.CallOption) (*ResponseData, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseData)
	err := c.cc.Invoke(ctx, AssetsService_GetTxHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetsServiceClient) FilterAddressList(ctx context.Context, in *FilterAddressListRequest, opts ...grpc.CallOption) (*ResponseData, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseData)
	err := c.cc.Invoke(ctx, AssetsService_FilterAddressList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetsServiceClient) CheckAndCreateAccountToken(ctx context.Context, in *CheckAndCreateAccountTokenRequest, opts ...grpc.CallOption) (*ResponseData, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseData)
	err := c.cc.Invoke(ctx, AssetsService_CheckAndCreateAccountToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetsServiceClient) FetchRate(ctx context.Context, in *CommonRequest, opts ...grpc.CallOption) (*ResponseData, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseData)
	err := c.cc.Invoke(ctx, AssetsService_FetchRate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetsServiceClient) CheckAssetMatchWithUser(ctx context.Context, in *OneIntegerRequest, opts ...grpc.CallOption) (*ResponseData, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseData)
	err := c.cc.Invoke(ctx, AssetsService_CheckAssetMatchWithUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetsServiceClient) CheckAddressMatchWithUser(ctx context.Context, in *CheckAddressMatchWithUserRequest, opts ...grpc.CallOption) (*ResponseData, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseData)
	err := c.cc.Invoke(ctx, AssetsService_CheckAddressMatchWithUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetsServiceClient) GetAddress(ctx context.Context, in *OneIntegerRequest, opts ...grpc.CallOption) (*ResponseData, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseData)
	err := c.cc.Invoke(ctx, AssetsService_GetAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetsServiceClient) ConfirmAddressAction(ctx context.Context, in *ConfirmAddressActionRequest, opts ...grpc.CallOption) (*ResponseData, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseData)
	err := c.cc.Invoke(ctx, AssetsService_ConfirmAddressAction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetsServiceClient) CancelUrlCode(ctx context.Context, in *OneIntegerRequest, opts ...grpc.CallOption) (*ResponseData, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseData)
	err := c.cc.Invoke(ctx, AssetsService_CancelUrlCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetsServiceClient) CheckContactUser(ctx context.Context, in *OneStringRequest, opts ...grpc.CallOption) (*ResponseData, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseData)
	err := c.cc.Invoke(ctx, AssetsService_CheckContactUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetsServiceClient) TransactionDetail(ctx context.Context, in *OneIntegerRequest, opts ...grpc.CallOption) (*ResponseData, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseData)
	err := c.cc.Invoke(ctx, AssetsService_TransactionDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetsServiceClient) AdminUpdateBalance(ctx context.Context, in *AdminBalanceUpdateRequest, opts ...grpc.CallOption) (*ResponseData, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseData)
	err := c.cc.Invoke(ctx, AssetsService_AdminUpdateBalance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetsServiceClient) GetTxCode(ctx context.Context, in *OneStringRequest, opts ...grpc.CallOption) (*ResponseData, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseData)
	err := c.cc.Invoke(ctx, AssetsService_GetTxCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetsServiceClient) HandlerURLCodeWithdrawlWithAccount(ctx context.Context, in *URLCodeWithdrawWithAccountRequest, opts ...grpc.CallOption) (*ResponseData, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseData)
	err := c.cc.Invoke(ctx, AssetsService_HandlerURLCodeWithdrawlWithAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetsServiceClient) CreateNewAsset(ctx context.Context, in *OneStringRequest, opts ...grpc.CallOption) (*ResponseData, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseData)
	err := c.cc.Invoke(ctx, AssetsService_CreateNewAsset_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetsServiceClient) WalletSocket(ctx context.Context, in *WalletNotifyRequest, opts ...grpc.CallOption) (*ResponseData, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseData)
	err := c.cc.Invoke(ctx, AssetsService_WalletSocket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AssetsServiceServer is the server API for AssetsService service.
// All implementations must embed UnimplementedAssetsServiceServer
// for forward compatibility.
type AssetsServiceServer interface {
	CreateNewAddress(context.Context, *OneStringRequest) (*ResponseData, error)
	SyncTransactions(context.Context, *CommonRequest) (*ResponseData, error)
	SendTradingRequest(context.Context, *SendTradingDataRequest) (*ResponseData, error)
	TransferAmount(context.Context, *TransferAmountRequest) (*ResponseData, error)
	AddToContact(context.Context, *OneStringRequest) (*ResponseData, error)
	FilterTxHistory(context.Context, *FilterTxHistoryRequest) (*ResponseData, error)
	GetCodeListData(context.Context, *GetCodeListRequest) (*ResponseData, error)
	GetAddressListDataWithStatus(context.Context, *GetAddressListRequest) (*ResponseData, error)
	ConfirmAmount(context.Context, *ConfirmAmountRequest) (*ResponseData, error)
	ConfirmWithdrawal(context.Context, *ConfirmWithdrawalRequest) (*ResponseData, error)
	UpdateNewLabel(context.Context, *UpdateLabelRequest) (*ResponseData, error)
	GetBalanceSummary(context.Context, *OneStringRequest) (*ResponseData, error)
	GetAssetDBList(context.Context, *GetAssetDBListRequest) (*ResponseData, error)
	GetUserAssetDB(context.Context, *GetUserAssetDBRequest) (*ResponseData, error)
	GetAddressList(context.Context, *OneIntegerRequest) (*ResponseData, error)
	CountAddress(context.Context, *CountAddressRequest) (*ResponseData, error)
	CheckHasCodeList(context.Context, *OneStringRequest) (*ResponseData, error)
	GetContactList(context.Context, *CommonRequest) (*ResponseData, error)
	FilterTxCode(context.Context, *FilterTxCodeRequest) (*ResponseData, error)
	GetTxHistory(context.Context, *OneIntegerRequest) (*ResponseData, error)
	FilterAddressList(context.Context, *FilterAddressListRequest) (*ResponseData, error)
	CheckAndCreateAccountToken(context.Context, *CheckAndCreateAccountTokenRequest) (*ResponseData, error)
	FetchRate(context.Context, *CommonRequest) (*ResponseData, error)
	CheckAssetMatchWithUser(context.Context, *OneIntegerRequest) (*ResponseData, error)
	CheckAddressMatchWithUser(context.Context, *CheckAddressMatchWithUserRequest) (*ResponseData, error)
	GetAddress(context.Context, *OneIntegerRequest) (*ResponseData, error)
	ConfirmAddressAction(context.Context, *ConfirmAddressActionRequest) (*ResponseData, error)
	CancelUrlCode(context.Context, *OneIntegerRequest) (*ResponseData, error)
	CheckContactUser(context.Context, *OneStringRequest) (*ResponseData, error)
	TransactionDetail(context.Context, *OneIntegerRequest) (*ResponseData, error)
	AdminUpdateBalance(context.Context, *AdminBalanceUpdateRequest) (*ResponseData, error)
	GetTxCode(context.Context, *OneStringRequest) (*ResponseData, error)
	HandlerURLCodeWithdrawlWithAccount(context.Context, *URLCodeWithdrawWithAccountRequest) (*ResponseData, error)
	CreateNewAsset(context.Context, *OneStringRequest) (*ResponseData, error)
	WalletSocket(context.Context, *WalletNotifyRequest) (*ResponseData, error)
	mustEmbedUnimplementedAssetsServiceServer()
}

// UnimplementedAssetsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAssetsServiceServer struct{}

func (UnimplementedAssetsServiceServer) CreateNewAddress(context.Context, *OneStringRequest) (*ResponseData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNewAddress not implemented")
}
func (UnimplementedAssetsServiceServer) SyncTransactions(context.Context, *CommonRequest) (*ResponseData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncTransactions not implemented")
}
func (UnimplementedAssetsServiceServer) SendTradingRequest(context.Context, *SendTradingDataRequest) (*ResponseData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTradingRequest not implemented")
}
func (UnimplementedAssetsServiceServer) TransferAmount(context.Context, *TransferAmountRequest) (*ResponseData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferAmount not implemented")
}
func (UnimplementedAssetsServiceServer) AddToContact(context.Context, *OneStringRequest) (*ResponseData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToContact not implemented")
}
func (UnimplementedAssetsServiceServer) FilterTxHistory(context.Context, *FilterTxHistoryRequest) (*ResponseData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FilterTxHistory not implemented")
}
func (UnimplementedAssetsServiceServer) GetCodeListData(context.Context, *GetCodeListRequest) (*ResponseData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCodeListData not implemented")
}
func (UnimplementedAssetsServiceServer) GetAddressListDataWithStatus(context.Context, *GetAddressListRequest) (*ResponseData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddressListDataWithStatus not implemented")
}
func (UnimplementedAssetsServiceServer) ConfirmAmount(context.Context, *ConfirmAmountRequest) (*ResponseData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmAmount not implemented")
}
func (UnimplementedAssetsServiceServer) ConfirmWithdrawal(context.Context, *ConfirmWithdrawalRequest) (*ResponseData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmWithdrawal not implemented")
}
func (UnimplementedAssetsServiceServer) UpdateNewLabel(context.Context, *UpdateLabelRequest) (*ResponseData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNewLabel not implemented")
}
func (UnimplementedAssetsServiceServer) GetBalanceSummary(context.Context, *OneStringRequest) (*ResponseData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalanceSummary not implemented")
}
func (UnimplementedAssetsServiceServer) GetAssetDBList(context.Context, *GetAssetDBListRequest) (*ResponseData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAssetDBList not implemented")
}
func (UnimplementedAssetsServiceServer) GetUserAssetDB(context.Context, *GetUserAssetDBRequest) (*ResponseData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserAssetDB not implemented")
}
func (UnimplementedAssetsServiceServer) GetAddressList(context.Context, *OneIntegerRequest) (*ResponseData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddressList not implemented")
}
func (UnimplementedAssetsServiceServer) CountAddress(context.Context, *CountAddressRequest) (*ResponseData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountAddress not implemented")
}
func (UnimplementedAssetsServiceServer) CheckHasCodeList(context.Context, *OneStringRequest) (*ResponseData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckHasCodeList not implemented")
}
func (UnimplementedAssetsServiceServer) GetContactList(context.Context, *CommonRequest) (*ResponseData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContactList not implemented")
}
func (UnimplementedAssetsServiceServer) FilterTxCode(context.Context, *FilterTxCodeRequest) (*ResponseData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FilterTxCode not implemented")
}
func (UnimplementedAssetsServiceServer) GetTxHistory(context.Context, *OneIntegerRequest) (*ResponseData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTxHistory not implemented")
}
func (UnimplementedAssetsServiceServer) FilterAddressList(context.Context, *FilterAddressListRequest) (*ResponseData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FilterAddressList not implemented")
}
func (UnimplementedAssetsServiceServer) CheckAndCreateAccountToken(context.Context, *CheckAndCreateAccountTokenRequest) (*ResponseData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAndCreateAccountToken not implemented")
}
func (UnimplementedAssetsServiceServer) FetchRate(context.Context, *CommonRequest) (*ResponseData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchRate not implemented")
}
func (UnimplementedAssetsServiceServer) CheckAssetMatchWithUser(context.Context, *OneIntegerRequest) (*ResponseData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAssetMatchWithUser not implemented")
}
func (UnimplementedAssetsServiceServer) CheckAddressMatchWithUser(context.Context, *CheckAddressMatchWithUserRequest) (*ResponseData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAddressMatchWithUser not implemented")
}
func (UnimplementedAssetsServiceServer) GetAddress(context.Context, *OneIntegerRequest) (*ResponseData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddress not implemented")
}
func (UnimplementedAssetsServiceServer) ConfirmAddressAction(context.Context, *ConfirmAddressActionRequest) (*ResponseData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmAddressAction not implemented")
}
func (UnimplementedAssetsServiceServer) CancelUrlCode(context.Context, *OneIntegerRequest) (*ResponseData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelUrlCode not implemented")
}
func (UnimplementedAssetsServiceServer) CheckContactUser(context.Context, *OneStringRequest) (*ResponseData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckContactUser not implemented")
}
func (UnimplementedAssetsServiceServer) TransactionDetail(context.Context, *OneIntegerRequest) (*ResponseData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransactionDetail not implemented")
}
func (UnimplementedAssetsServiceServer) AdminUpdateBalance(context.Context, *AdminBalanceUpdateRequest) (*ResponseData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminUpdateBalance not implemented")
}
func (UnimplementedAssetsServiceServer) GetTxCode(context.Context, *OneStringRequest) (*ResponseData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTxCode not implemented")
}
func (UnimplementedAssetsServiceServer) HandlerURLCodeWithdrawlWithAccount(context.Context, *URLCodeWithdrawWithAccountRequest) (*ResponseData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandlerURLCodeWithdrawlWithAccount not implemented")
}
func (UnimplementedAssetsServiceServer) CreateNewAsset(context.Context, *OneStringRequest) (*ResponseData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNewAsset not implemented")
}
func (UnimplementedAssetsServiceServer) WalletSocket(context.Context, *WalletNotifyRequest) (*ResponseData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WalletSocket not implemented")
}
func (UnimplementedAssetsServiceServer) mustEmbedUnimplementedAssetsServiceServer() {}
func (UnimplementedAssetsServiceServer) testEmbeddedByValue()                       {}

// UnsafeAssetsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AssetsServiceServer will
// result in compilation errors.
type UnsafeAssetsServiceServer interface {
	mustEmbedUnimplementedAssetsServiceServer()
}

func RegisterAssetsServiceServer(s grpc.ServiceRegistrar, srv AssetsServiceServer) {
	// If the following call pancis, it indicates UnimplementedAssetsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AssetsService_ServiceDesc, srv)
}

func _AssetsService_CreateNewAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OneStringRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetsServiceServer).CreateNewAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetsService_CreateNewAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetsServiceServer).CreateNewAddress(ctx, req.(*OneStringRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetsService_SyncTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetsServiceServer).SyncTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetsService_SyncTransactions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetsServiceServer).SyncTransactions(ctx, req.(*CommonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetsService_SendTradingRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendTradingDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetsServiceServer).SendTradingRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetsService_SendTradingRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetsServiceServer).SendTradingRequest(ctx, req.(*SendTradingDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetsService_TransferAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferAmountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetsServiceServer).TransferAmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetsService_TransferAmount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetsServiceServer).TransferAmount(ctx, req.(*TransferAmountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetsService_AddToContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OneStringRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetsServiceServer).AddToContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetsService_AddToContact_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetsServiceServer).AddToContact(ctx, req.(*OneStringRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetsService_FilterTxHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterTxHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetsServiceServer).FilterTxHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetsService_FilterTxHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetsServiceServer).FilterTxHistory(ctx, req.(*FilterTxHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetsService_GetCodeListData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCodeListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetsServiceServer).GetCodeListData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetsService_GetCodeListData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetsServiceServer).GetCodeListData(ctx, req.(*GetCodeListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetsService_GetAddressListDataWithStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAddressListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetsServiceServer).GetAddressListDataWithStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetsService_GetAddressListDataWithStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetsServiceServer).GetAddressListDataWithStatus(ctx, req.(*GetAddressListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetsService_ConfirmAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmAmountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetsServiceServer).ConfirmAmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetsService_ConfirmAmount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetsServiceServer).ConfirmAmount(ctx, req.(*ConfirmAmountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetsService_ConfirmWithdrawal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmWithdrawalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetsServiceServer).ConfirmWithdrawal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetsService_ConfirmWithdrawal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetsServiceServer).ConfirmWithdrawal(ctx, req.(*ConfirmWithdrawalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetsService_UpdateNewLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLabelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetsServiceServer).UpdateNewLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetsService_UpdateNewLabel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetsServiceServer).UpdateNewLabel(ctx, req.(*UpdateLabelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetsService_GetBalanceSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OneStringRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetsServiceServer).GetBalanceSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetsService_GetBalanceSummary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetsServiceServer).GetBalanceSummary(ctx, req.(*OneStringRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetsService_GetAssetDBList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAssetDBListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetsServiceServer).GetAssetDBList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetsService_GetAssetDBList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetsServiceServer).GetAssetDBList(ctx, req.(*GetAssetDBListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetsService_GetUserAssetDB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserAssetDBRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetsServiceServer).GetUserAssetDB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetsService_GetUserAssetDB_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetsServiceServer).GetUserAssetDB(ctx, req.(*GetUserAssetDBRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetsService_GetAddressList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OneIntegerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetsServiceServer).GetAddressList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetsService_GetAddressList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetsServiceServer).GetAddressList(ctx, req.(*OneIntegerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetsService_CountAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetsServiceServer).CountAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetsService_CountAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetsServiceServer).CountAddress(ctx, req.(*CountAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetsService_CheckHasCodeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OneStringRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetsServiceServer).CheckHasCodeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetsService_CheckHasCodeList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetsServiceServer).CheckHasCodeList(ctx, req.(*OneStringRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetsService_GetContactList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetsServiceServer).GetContactList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetsService_GetContactList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetsServiceServer).GetContactList(ctx, req.(*CommonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetsService_FilterTxCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterTxCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetsServiceServer).FilterTxCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetsService_FilterTxCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetsServiceServer).FilterTxCode(ctx, req.(*FilterTxCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetsService_GetTxHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OneIntegerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetsServiceServer).GetTxHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetsService_GetTxHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetsServiceServer).GetTxHistory(ctx, req.(*OneIntegerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetsService_FilterAddressList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterAddressListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetsServiceServer).FilterAddressList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetsService_FilterAddressList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetsServiceServer).FilterAddressList(ctx, req.(*FilterAddressListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetsService_CheckAndCreateAccountToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckAndCreateAccountTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetsServiceServer).CheckAndCreateAccountToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetsService_CheckAndCreateAccountToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetsServiceServer).CheckAndCreateAccountToken(ctx, req.(*CheckAndCreateAccountTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetsService_FetchRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetsServiceServer).FetchRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetsService_FetchRate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetsServiceServer).FetchRate(ctx, req.(*CommonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetsService_CheckAssetMatchWithUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OneIntegerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetsServiceServer).CheckAssetMatchWithUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetsService_CheckAssetMatchWithUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetsServiceServer).CheckAssetMatchWithUser(ctx, req.(*OneIntegerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetsService_CheckAddressMatchWithUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckAddressMatchWithUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetsServiceServer).CheckAddressMatchWithUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetsService_CheckAddressMatchWithUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetsServiceServer).CheckAddressMatchWithUser(ctx, req.(*CheckAddressMatchWithUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetsService_GetAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OneIntegerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetsServiceServer).GetAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetsService_GetAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetsServiceServer).GetAddress(ctx, req.(*OneIntegerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetsService_ConfirmAddressAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmAddressActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetsServiceServer).ConfirmAddressAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetsService_ConfirmAddressAction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetsServiceServer).ConfirmAddressAction(ctx, req.(*ConfirmAddressActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetsService_CancelUrlCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OneIntegerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetsServiceServer).CancelUrlCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetsService_CancelUrlCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetsServiceServer).CancelUrlCode(ctx, req.(*OneIntegerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetsService_CheckContactUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OneStringRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetsServiceServer).CheckContactUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetsService_CheckContactUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetsServiceServer).CheckContactUser(ctx, req.(*OneStringRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetsService_TransactionDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OneIntegerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetsServiceServer).TransactionDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetsService_TransactionDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetsServiceServer).TransactionDetail(ctx, req.(*OneIntegerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetsService_AdminUpdateBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminBalanceUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetsServiceServer).AdminUpdateBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetsService_AdminUpdateBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetsServiceServer).AdminUpdateBalance(ctx, req.(*AdminBalanceUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetsService_GetTxCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OneStringRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetsServiceServer).GetTxCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetsService_GetTxCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetsServiceServer).GetTxCode(ctx, req.(*OneStringRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetsService_HandlerURLCodeWithdrawlWithAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(URLCodeWithdrawWithAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetsServiceServer).HandlerURLCodeWithdrawlWithAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetsService_HandlerURLCodeWithdrawlWithAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetsServiceServer).HandlerURLCodeWithdrawlWithAccount(ctx, req.(*URLCodeWithdrawWithAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetsService_CreateNewAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OneStringRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetsServiceServer).CreateNewAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetsService_CreateNewAsset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetsServiceServer).CreateNewAsset(ctx, req.(*OneStringRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetsService_WalletSocket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WalletNotifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetsServiceServer).WalletSocket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetsService_WalletSocket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetsServiceServer).WalletSocket(ctx, req.(*WalletNotifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AssetsService_ServiceDesc is the grpc.ServiceDesc for AssetsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AssetsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "assets.AssetsService",
	HandlerType: (*AssetsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNewAddress",
			Handler:    _AssetsService_CreateNewAddress_Handler,
		},
		{
			MethodName: "SyncTransactions",
			Handler:    _AssetsService_SyncTransactions_Handler,
		},
		{
			MethodName: "SendTradingRequest",
			Handler:    _AssetsService_SendTradingRequest_Handler,
		},
		{
			MethodName: "TransferAmount",
			Handler:    _AssetsService_TransferAmount_Handler,
		},
		{
			MethodName: "AddToContact",
			Handler:    _AssetsService_AddToContact_Handler,
		},
		{
			MethodName: "FilterTxHistory",
			Handler:    _AssetsService_FilterTxHistory_Handler,
		},
		{
			MethodName: "GetCodeListData",
			Handler:    _AssetsService_GetCodeListData_Handler,
		},
		{
			MethodName: "GetAddressListDataWithStatus",
			Handler:    _AssetsService_GetAddressListDataWithStatus_Handler,
		},
		{
			MethodName: "ConfirmAmount",
			Handler:    _AssetsService_ConfirmAmount_Handler,
		},
		{
			MethodName: "ConfirmWithdrawal",
			Handler:    _AssetsService_ConfirmWithdrawal_Handler,
		},
		{
			MethodName: "UpdateNewLabel",
			Handler:    _AssetsService_UpdateNewLabel_Handler,
		},
		{
			MethodName: "GetBalanceSummary",
			Handler:    _AssetsService_GetBalanceSummary_Handler,
		},
		{
			MethodName: "GetAssetDBList",
			Handler:    _AssetsService_GetAssetDBList_Handler,
		},
		{
			MethodName: "GetUserAssetDB",
			Handler:    _AssetsService_GetUserAssetDB_Handler,
		},
		{
			MethodName: "GetAddressList",
			Handler:    _AssetsService_GetAddressList_Handler,
		},
		{
			MethodName: "CountAddress",
			Handler:    _AssetsService_CountAddress_Handler,
		},
		{
			MethodName: "CheckHasCodeList",
			Handler:    _AssetsService_CheckHasCodeList_Handler,
		},
		{
			MethodName: "GetContactList",
			Handler:    _AssetsService_GetContactList_Handler,
		},
		{
			MethodName: "FilterTxCode",
			Handler:    _AssetsService_FilterTxCode_Handler,
		},
		{
			MethodName: "GetTxHistory",
			Handler:    _AssetsService_GetTxHistory_Handler,
		},
		{
			MethodName: "FilterAddressList",
			Handler:    _AssetsService_FilterAddressList_Handler,
		},
		{
			MethodName: "CheckAndCreateAccountToken",
			Handler:    _AssetsService_CheckAndCreateAccountToken_Handler,
		},
		{
			MethodName: "FetchRate",
			Handler:    _AssetsService_FetchRate_Handler,
		},
		{
			MethodName: "CheckAssetMatchWithUser",
			Handler:    _AssetsService_CheckAssetMatchWithUser_Handler,
		},
		{
			MethodName: "CheckAddressMatchWithUser",
			Handler:    _AssetsService_CheckAddressMatchWithUser_Handler,
		},
		{
			MethodName: "GetAddress",
			Handler:    _AssetsService_GetAddress_Handler,
		},
		{
			MethodName: "ConfirmAddressAction",
			Handler:    _AssetsService_ConfirmAddressAction_Handler,
		},
		{
			MethodName: "CancelUrlCode",
			Handler:    _AssetsService_CancelUrlCode_Handler,
		},
		{
			MethodName: "CheckContactUser",
			Handler:    _AssetsService_CheckContactUser_Handler,
		},
		{
			MethodName: "TransactionDetail",
			Handler:    _AssetsService_TransactionDetail_Handler,
		},
		{
			MethodName: "AdminUpdateBalance",
			Handler:    _AssetsService_AdminUpdateBalance_Handler,
		},
		{
			MethodName: "GetTxCode",
			Handler:    _AssetsService_GetTxCode_Handler,
		},
		{
			MethodName: "HandlerURLCodeWithdrawlWithAccount",
			Handler:    _AssetsService_HandlerURLCodeWithdrawlWithAccount_Handler,
		},
		{
			MethodName: "CreateNewAsset",
			Handler:    _AssetsService_CreateNewAsset_Handler,
		},
		{
			MethodName: "WalletSocket",
			Handler:    _AssetsService_WalletSocket_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "assets.proto",
}
