// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: auth.proto

package authpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AuthService_BeginRegistration_FullMethodName           = "/crauth.AuthService/BeginRegistration"
	AuthService_CancelRegister_FullMethodName              = "/crauth.AuthService/CancelRegister"
	AuthService_BeginUpdatePasskey_FullMethodName          = "/crauth.AuthService/BeginUpdatePasskey"
	AuthService_FinishUpdatePasskey_FullMethodName         = "/crauth.AuthService/FinishUpdatePasskey"
	AuthService_FinishRegistration_FullMethodName          = "/crauth.AuthService/FinishRegistration"
	AuthService_AssertionOptions_FullMethodName            = "/crauth.AuthService/AssertionOptions"
	AuthService_AssertionResult_FullMethodName             = "/crauth.AuthService/AssertionResult"
	AuthService_BeginConfirmPasskey_FullMethodName         = "/crauth.AuthService/BeginConfirmPasskey"
	AuthService_FinishConfirmPasskey_FullMethodName        = "/crauth.AuthService/FinishConfirmPasskey"
	AuthService_ChangeUsernameFinish_FullMethodName        = "/crauth.AuthService/ChangeUsernameFinish"
	AuthService_SyncUsernameDB_FullMethodName              = "/crauth.AuthService/SyncUsernameDB"
	AuthService_GetAdminUserList_FullMethodName            = "/crauth.AuthService/GetAdminUserList"
	AuthService_GetUserInfoByUsername_FullMethodName       = "/crauth.AuthService/GetUserInfoByUsername"
	AuthService_GetAdminUserInfo_FullMethodName            = "/crauth.AuthService/GetAdminUserInfo"
	AuthService_GetExcludeLoginUserNameList_FullMethodName = "/crauth.AuthService/GetExcludeLoginUserNameList"
	AuthService_ChangeUserStatus_FullMethodName            = "/crauth.AuthService/ChangeUserStatus"
	AuthService_IsLoggingOn_FullMethodName                 = "/crauth.AuthService/IsLoggingOn"
	AuthService_GenRandomUsername_FullMethodName           = "/crauth.AuthService/GenRandomUsername"
	AuthService_CheckUser_FullMethodName                   = "/crauth.AuthService/CheckUser"
	AuthService_RegisterByPassword_FullMethodName          = "/crauth.AuthService/RegisterByPassword"
)

// AuthServiceClient is the client API for AuthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthServiceClient interface {
	BeginRegistration(ctx context.Context, in *WithUsernameRequest, opts ...grpc.CallOption) (*ResponseData, error)
	CancelRegister(ctx context.Context, in *CancelRegisterRequest, opts ...grpc.CallOption) (*ResponseData, error)
	BeginUpdatePasskey(ctx context.Context, in *CommonRequest, opts ...grpc.CallOption) (*ResponseData, error)
	FinishUpdatePasskey(ctx context.Context, in *FinishUpdatePasskeyRequest, opts ...grpc.CallOption) (*ResponseData, error)
	FinishRegistration(ctx context.Context, in *SessionKeyAndHttpRequest, opts ...grpc.CallOption) (*ResponseData, error)
	AssertionOptions(ctx context.Context, in *CommonRequest, opts ...grpc.CallOption) (*ResponseData, error)
	AssertionResult(ctx context.Context, in *SessionKeyAndHttpRequest, opts ...grpc.CallOption) (*ResponseData, error)
	BeginConfirmPasskey(ctx context.Context, in *CommonRequest, opts ...grpc.CallOption) (*ResponseData, error)
	FinishConfirmPasskey(ctx context.Context, in *SessionKeyAndHttpRequest, opts ...grpc.CallOption) (*ResponseData, error)
	ChangeUsernameFinish(ctx context.Context, in *ChangeUsernameFinishRequest, opts ...grpc.CallOption) (*ResponseData, error)
	SyncUsernameDB(ctx context.Context, in *SyncUsernameDBRequest, opts ...grpc.CallOption) (*ResponseData, error)
	GetAdminUserList(ctx context.Context, in *CommonRequest, opts ...grpc.CallOption) (*ResponseData, error)
	GetUserInfoByUsername(ctx context.Context, in *WithUsernameRequest, opts ...grpc.CallOption) (*ResponseData, error)
	GetAdminUserInfo(ctx context.Context, in *WithUserIdRequest, opts ...grpc.CallOption) (*ResponseData, error)
	GetExcludeLoginUserNameList(ctx context.Context, in *CommonRequest, opts ...grpc.CallOption) (*ResponseData, error)
	ChangeUserStatus(ctx context.Context, in *ChangeUserStatusRequest, opts ...grpc.CallOption) (*ResponseData, error)
	IsLoggingOn(ctx context.Context, in *CommonRequest, opts ...grpc.CallOption) (*ResponseData, error)
	GenRandomUsername(ctx context.Context, in *CommonRequest, opts ...grpc.CallOption) (*ResponseData, error)
	CheckUser(ctx context.Context, in *WithUsernameRequest, opts ...grpc.CallOption) (*ResponseData, error)
	RegisterByPassword(ctx context.Context, in *WithPasswordRequest, opts ...grpc.CallOption) (*ResponseData, error)
}

type authServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthServiceClient(cc grpc.ClientConnInterface) AuthServiceClient {
	return &authServiceClient{cc}
}

func (c *authServiceClient) BeginRegistration(ctx context.Context, in *WithUsernameRequest, opts ...grpc.CallOption) (*ResponseData, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseData)
	err := c.cc.Invoke(ctx, AuthService_BeginRegistration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) CancelRegister(ctx context.Context, in *CancelRegisterRequest, opts ...grpc.CallOption) (*ResponseData, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseData)
	err := c.cc.Invoke(ctx, AuthService_CancelRegister_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) BeginUpdatePasskey(ctx context.Context, in *CommonRequest, opts ...grpc.CallOption) (*ResponseData, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseData)
	err := c.cc.Invoke(ctx, AuthService_BeginUpdatePasskey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) FinishUpdatePasskey(ctx context.Context, in *FinishUpdatePasskeyRequest, opts ...grpc.CallOption) (*ResponseData, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseData)
	err := c.cc.Invoke(ctx, AuthService_FinishUpdatePasskey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) FinishRegistration(ctx context.Context, in *SessionKeyAndHttpRequest, opts ...grpc.CallOption) (*ResponseData, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseData)
	err := c.cc.Invoke(ctx, AuthService_FinishRegistration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) AssertionOptions(ctx context.Context, in *CommonRequest, opts ...grpc.CallOption) (*ResponseData, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseData)
	err := c.cc.Invoke(ctx, AuthService_AssertionOptions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) AssertionResult(ctx context.Context, in *SessionKeyAndHttpRequest, opts ...grpc.CallOption) (*ResponseData, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseData)
	err := c.cc.Invoke(ctx, AuthService_AssertionResult_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) BeginConfirmPasskey(ctx context.Context, in *CommonRequest, opts ...grpc.CallOption) (*ResponseData, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseData)
	err := c.cc.Invoke(ctx, AuthService_BeginConfirmPasskey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) FinishConfirmPasskey(ctx context.Context, in *SessionKeyAndHttpRequest, opts ...grpc.CallOption) (*ResponseData, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseData)
	err := c.cc.Invoke(ctx, AuthService_FinishConfirmPasskey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ChangeUsernameFinish(ctx context.Context, in *ChangeUsernameFinishRequest, opts ...grpc.CallOption) (*ResponseData, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseData)
	err := c.cc.Invoke(ctx, AuthService_ChangeUsernameFinish_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) SyncUsernameDB(ctx context.Context, in *SyncUsernameDBRequest, opts ...grpc.CallOption) (*ResponseData, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseData)
	err := c.cc.Invoke(ctx, AuthService_SyncUsernameDB_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetAdminUserList(ctx context.Context, in *CommonRequest, opts ...grpc.CallOption) (*ResponseData, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseData)
	err := c.cc.Invoke(ctx, AuthService_GetAdminUserList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetUserInfoByUsername(ctx context.Context, in *WithUsernameRequest, opts ...grpc.CallOption) (*ResponseData, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseData)
	err := c.cc.Invoke(ctx, AuthService_GetUserInfoByUsername_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetAdminUserInfo(ctx context.Context, in *WithUserIdRequest, opts ...grpc.CallOption) (*ResponseData, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseData)
	err := c.cc.Invoke(ctx, AuthService_GetAdminUserInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetExcludeLoginUserNameList(ctx context.Context, in *CommonRequest, opts ...grpc.CallOption) (*ResponseData, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseData)
	err := c.cc.Invoke(ctx, AuthService_GetExcludeLoginUserNameList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ChangeUserStatus(ctx context.Context, in *ChangeUserStatusRequest, opts ...grpc.CallOption) (*ResponseData, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseData)
	err := c.cc.Invoke(ctx, AuthService_ChangeUserStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) IsLoggingOn(ctx context.Context, in *CommonRequest, opts ...grpc.CallOption) (*ResponseData, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseData)
	err := c.cc.Invoke(ctx, AuthService_IsLoggingOn_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GenRandomUsername(ctx context.Context, in *CommonRequest, opts ...grpc.CallOption) (*ResponseData, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseData)
	err := c.cc.Invoke(ctx, AuthService_GenRandomUsername_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) CheckUser(ctx context.Context, in *WithUsernameRequest, opts ...grpc.CallOption) (*ResponseData, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseData)
	err := c.cc.Invoke(ctx, AuthService_CheckUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) RegisterByPassword(ctx context.Context, in *WithPasswordRequest, opts ...grpc.CallOption) (*ResponseData, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseData)
	err := c.cc.Invoke(ctx, AuthService_RegisterByPassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServiceServer is the server API for AuthService service.
// All implementations must embed UnimplementedAuthServiceServer
// for forward compatibility.
type AuthServiceServer interface {
	BeginRegistration(context.Context, *WithUsernameRequest) (*ResponseData, error)
	CancelRegister(context.Context, *CancelRegisterRequest) (*ResponseData, error)
	BeginUpdatePasskey(context.Context, *CommonRequest) (*ResponseData, error)
	FinishUpdatePasskey(context.Context, *FinishUpdatePasskeyRequest) (*ResponseData, error)
	FinishRegistration(context.Context, *SessionKeyAndHttpRequest) (*ResponseData, error)
	AssertionOptions(context.Context, *CommonRequest) (*ResponseData, error)
	AssertionResult(context.Context, *SessionKeyAndHttpRequest) (*ResponseData, error)
	BeginConfirmPasskey(context.Context, *CommonRequest) (*ResponseData, error)
	FinishConfirmPasskey(context.Context, *SessionKeyAndHttpRequest) (*ResponseData, error)
	ChangeUsernameFinish(context.Context, *ChangeUsernameFinishRequest) (*ResponseData, error)
	SyncUsernameDB(context.Context, *SyncUsernameDBRequest) (*ResponseData, error)
	GetAdminUserList(context.Context, *CommonRequest) (*ResponseData, error)
	GetUserInfoByUsername(context.Context, *WithUsernameRequest) (*ResponseData, error)
	GetAdminUserInfo(context.Context, *WithUserIdRequest) (*ResponseData, error)
	GetExcludeLoginUserNameList(context.Context, *CommonRequest) (*ResponseData, error)
	ChangeUserStatus(context.Context, *ChangeUserStatusRequest) (*ResponseData, error)
	IsLoggingOn(context.Context, *CommonRequest) (*ResponseData, error)
	GenRandomUsername(context.Context, *CommonRequest) (*ResponseData, error)
	CheckUser(context.Context, *WithUsernameRequest) (*ResponseData, error)
	RegisterByPassword(context.Context, *WithPasswordRequest) (*ResponseData, error)
	mustEmbedUnimplementedAuthServiceServer()
}

// UnimplementedAuthServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAuthServiceServer struct{}

func (UnimplementedAuthServiceServer) BeginRegistration(context.Context, *WithUsernameRequest) (*ResponseData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BeginRegistration not implemented")
}
func (UnimplementedAuthServiceServer) CancelRegister(context.Context, *CancelRegisterRequest) (*ResponseData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelRegister not implemented")
}
func (UnimplementedAuthServiceServer) BeginUpdatePasskey(context.Context, *CommonRequest) (*ResponseData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BeginUpdatePasskey not implemented")
}
func (UnimplementedAuthServiceServer) FinishUpdatePasskey(context.Context, *FinishUpdatePasskeyRequest) (*ResponseData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinishUpdatePasskey not implemented")
}
func (UnimplementedAuthServiceServer) FinishRegistration(context.Context, *SessionKeyAndHttpRequest) (*ResponseData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinishRegistration not implemented")
}
func (UnimplementedAuthServiceServer) AssertionOptions(context.Context, *CommonRequest) (*ResponseData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssertionOptions not implemented")
}
func (UnimplementedAuthServiceServer) AssertionResult(context.Context, *SessionKeyAndHttpRequest) (*ResponseData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssertionResult not implemented")
}
func (UnimplementedAuthServiceServer) BeginConfirmPasskey(context.Context, *CommonRequest) (*ResponseData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BeginConfirmPasskey not implemented")
}
func (UnimplementedAuthServiceServer) FinishConfirmPasskey(context.Context, *SessionKeyAndHttpRequest) (*ResponseData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinishConfirmPasskey not implemented")
}
func (UnimplementedAuthServiceServer) ChangeUsernameFinish(context.Context, *ChangeUsernameFinishRequest) (*ResponseData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeUsernameFinish not implemented")
}
func (UnimplementedAuthServiceServer) SyncUsernameDB(context.Context, *SyncUsernameDBRequest) (*ResponseData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncUsernameDB not implemented")
}
func (UnimplementedAuthServiceServer) GetAdminUserList(context.Context, *CommonRequest) (*ResponseData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAdminUserList not implemented")
}
func (UnimplementedAuthServiceServer) GetUserInfoByUsername(context.Context, *WithUsernameRequest) (*ResponseData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfoByUsername not implemented")
}
func (UnimplementedAuthServiceServer) GetAdminUserInfo(context.Context, *WithUserIdRequest) (*ResponseData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAdminUserInfo not implemented")
}
func (UnimplementedAuthServiceServer) GetExcludeLoginUserNameList(context.Context, *CommonRequest) (*ResponseData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExcludeLoginUserNameList not implemented")
}
func (UnimplementedAuthServiceServer) ChangeUserStatus(context.Context, *ChangeUserStatusRequest) (*ResponseData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeUserStatus not implemented")
}
func (UnimplementedAuthServiceServer) IsLoggingOn(context.Context, *CommonRequest) (*ResponseData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsLoggingOn not implemented")
}
func (UnimplementedAuthServiceServer) GenRandomUsername(context.Context, *CommonRequest) (*ResponseData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenRandomUsername not implemented")
}
func (UnimplementedAuthServiceServer) CheckUser(context.Context, *WithUsernameRequest) (*ResponseData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckUser not implemented")
}
func (UnimplementedAuthServiceServer) RegisterByPassword(context.Context, *WithPasswordRequest) (*ResponseData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterByPassword not implemented")
}
func (UnimplementedAuthServiceServer) mustEmbedUnimplementedAuthServiceServer() {}
func (UnimplementedAuthServiceServer) testEmbeddedByValue()                     {}

// UnsafeAuthServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthServiceServer will
// result in compilation errors.
type UnsafeAuthServiceServer interface {
	mustEmbedUnimplementedAuthServiceServer()
}

func RegisterAuthServiceServer(s grpc.ServiceRegistrar, srv AuthServiceServer) {
	// If the following call pancis, it indicates UnimplementedAuthServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AuthService_ServiceDesc, srv)
}

func _AuthService_BeginRegistration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithUsernameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).BeginRegistration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_BeginRegistration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).BeginRegistration(ctx, req.(*WithUsernameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_CancelRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).CancelRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_CancelRegister_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).CancelRegister(ctx, req.(*CancelRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_BeginUpdatePasskey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).BeginUpdatePasskey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_BeginUpdatePasskey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).BeginUpdatePasskey(ctx, req.(*CommonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_FinishUpdatePasskey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinishUpdatePasskeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).FinishUpdatePasskey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_FinishUpdatePasskey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).FinishUpdatePasskey(ctx, req.(*FinishUpdatePasskeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_FinishRegistration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionKeyAndHttpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).FinishRegistration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_FinishRegistration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).FinishRegistration(ctx, req.(*SessionKeyAndHttpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_AssertionOptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).AssertionOptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_AssertionOptions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).AssertionOptions(ctx, req.(*CommonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_AssertionResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionKeyAndHttpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).AssertionResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_AssertionResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).AssertionResult(ctx, req.(*SessionKeyAndHttpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_BeginConfirmPasskey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).BeginConfirmPasskey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_BeginConfirmPasskey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).BeginConfirmPasskey(ctx, req.(*CommonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_FinishConfirmPasskey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionKeyAndHttpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).FinishConfirmPasskey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_FinishConfirmPasskey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).FinishConfirmPasskey(ctx, req.(*SessionKeyAndHttpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ChangeUsernameFinish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeUsernameFinishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ChangeUsernameFinish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_ChangeUsernameFinish_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ChangeUsernameFinish(ctx, req.(*ChangeUsernameFinishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_SyncUsernameDB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncUsernameDBRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).SyncUsernameDB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_SyncUsernameDB_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).SyncUsernameDB(ctx, req.(*SyncUsernameDBRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetAdminUserList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetAdminUserList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetAdminUserList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetAdminUserList(ctx, req.(*CommonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetUserInfoByUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithUsernameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetUserInfoByUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetUserInfoByUsername_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetUserInfoByUsername(ctx, req.(*WithUsernameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetAdminUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetAdminUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetAdminUserInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetAdminUserInfo(ctx, req.(*WithUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetExcludeLoginUserNameList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetExcludeLoginUserNameList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetExcludeLoginUserNameList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetExcludeLoginUserNameList(ctx, req.(*CommonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ChangeUserStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeUserStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ChangeUserStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_ChangeUserStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ChangeUserStatus(ctx, req.(*ChangeUserStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_IsLoggingOn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).IsLoggingOn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_IsLoggingOn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).IsLoggingOn(ctx, req.(*CommonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GenRandomUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GenRandomUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GenRandomUsername_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GenRandomUsername(ctx, req.(*CommonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_CheckUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithUsernameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).CheckUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_CheckUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).CheckUser(ctx, req.(*WithUsernameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_RegisterByPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).RegisterByPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_RegisterByPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).RegisterByPassword(ctx, req.(*WithPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthService_ServiceDesc is the grpc.ServiceDesc for AuthService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "crauth.AuthService",
	HandlerType: (*AuthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BeginRegistration",
			Handler:    _AuthService_BeginRegistration_Handler,
		},
		{
			MethodName: "CancelRegister",
			Handler:    _AuthService_CancelRegister_Handler,
		},
		{
			MethodName: "BeginUpdatePasskey",
			Handler:    _AuthService_BeginUpdatePasskey_Handler,
		},
		{
			MethodName: "FinishUpdatePasskey",
			Handler:    _AuthService_FinishUpdatePasskey_Handler,
		},
		{
			MethodName: "FinishRegistration",
			Handler:    _AuthService_FinishRegistration_Handler,
		},
		{
			MethodName: "AssertionOptions",
			Handler:    _AuthService_AssertionOptions_Handler,
		},
		{
			MethodName: "AssertionResult",
			Handler:    _AuthService_AssertionResult_Handler,
		},
		{
			MethodName: "BeginConfirmPasskey",
			Handler:    _AuthService_BeginConfirmPasskey_Handler,
		},
		{
			MethodName: "FinishConfirmPasskey",
			Handler:    _AuthService_FinishConfirmPasskey_Handler,
		},
		{
			MethodName: "ChangeUsernameFinish",
			Handler:    _AuthService_ChangeUsernameFinish_Handler,
		},
		{
			MethodName: "SyncUsernameDB",
			Handler:    _AuthService_SyncUsernameDB_Handler,
		},
		{
			MethodName: "GetAdminUserList",
			Handler:    _AuthService_GetAdminUserList_Handler,
		},
		{
			MethodName: "GetUserInfoByUsername",
			Handler:    _AuthService_GetUserInfoByUsername_Handler,
		},
		{
			MethodName: "GetAdminUserInfo",
			Handler:    _AuthService_GetAdminUserInfo_Handler,
		},
		{
			MethodName: "GetExcludeLoginUserNameList",
			Handler:    _AuthService_GetExcludeLoginUserNameList_Handler,
		},
		{
			MethodName: "ChangeUserStatus",
			Handler:    _AuthService_ChangeUserStatus_Handler,
		},
		{
			MethodName: "IsLoggingOn",
			Handler:    _AuthService_IsLoggingOn_Handler,
		},
		{
			MethodName: "GenRandomUsername",
			Handler:    _AuthService_GenRandomUsername_Handler,
		},
		{
			MethodName: "CheckUser",
			Handler:    _AuthService_CheckUser_Handler,
		},
		{
			MethodName: "RegisterByPassword",
			Handler:    _AuthService_RegisterByPassword_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth.proto",
}
