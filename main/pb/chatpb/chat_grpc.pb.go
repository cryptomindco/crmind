// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.6.1
// source: chat.proto

package chatpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ChatService_UpdateUnreadForChat_FullMethodName   = "/crchat.ChatService/UpdateUnreadForChat"
	ChatService_DeleteChat_FullMethodName            = "/crchat.ChatService/DeleteChat"
	ChatService_CheckAndCreateChat_FullMethodName    = "/crchat.ChatService/CheckAndCreateChat"
	ChatService_SendChatMessage_FullMethodName       = "/crchat.ChatService/SendChatMessage"
	ChatService_CheckChatExist_FullMethodName        = "/crchat.ChatService/CheckChatExist"
	ChatService_GetChatMsgDisplayList_FullMethodName = "/crchat.ChatService/GetChatMsgDisplayList"
	ChatService_GetChatMsg_FullMethodName            = "/crchat.ChatService/GetChatMsg"
	ChatService_CreateHelloChat_FullMethodName       = "/crchat.ChatService/CreateHelloChat"
)

// ChatServiceClient is the client API for ChatService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatServiceClient interface {
	UpdateUnreadForChat(ctx context.Context, in *UpdateUnreadForChatRequest, opts ...grpc.CallOption) (*ResponseData, error)
	DeleteChat(ctx context.Context, in *DeleteChatRequest, opts ...grpc.CallOption) (*ResponseData, error)
	CheckAndCreateChat(ctx context.Context, in *CheckAndCreateChatRequest, opts ...grpc.CallOption) (*ResponseData, error)
	SendChatMessage(ctx context.Context, in *SendChatMessageRequest, opts ...grpc.CallOption) (*ResponseData, error)
	CheckChatExist(ctx context.Context, in *CheckChatExistRequest, opts ...grpc.CallOption) (*ResponseData, error)
	GetChatMsgDisplayList(ctx context.Context, in *CommonRequest, opts ...grpc.CallOption) (*ResponseData, error)
	GetChatMsg(ctx context.Context, in *GetChatMsgRequest, opts ...grpc.CallOption) (*ResponseData, error)
	CreateHelloChat(ctx context.Context, in *CreateHelloChatRequest, opts ...grpc.CallOption) (*ResponseData, error)
}

type chatServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChatServiceClient(cc grpc.ClientConnInterface) ChatServiceClient {
	return &chatServiceClient{cc}
}

func (c *chatServiceClient) UpdateUnreadForChat(ctx context.Context, in *UpdateUnreadForChatRequest, opts ...grpc.CallOption) (*ResponseData, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseData)
	err := c.cc.Invoke(ctx, ChatService_UpdateUnreadForChat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) DeleteChat(ctx context.Context, in *DeleteChatRequest, opts ...grpc.CallOption) (*ResponseData, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseData)
	err := c.cc.Invoke(ctx, ChatService_DeleteChat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) CheckAndCreateChat(ctx context.Context, in *CheckAndCreateChatRequest, opts ...grpc.CallOption) (*ResponseData, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseData)
	err := c.cc.Invoke(ctx, ChatService_CheckAndCreateChat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) SendChatMessage(ctx context.Context, in *SendChatMessageRequest, opts ...grpc.CallOption) (*ResponseData, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseData)
	err := c.cc.Invoke(ctx, ChatService_SendChatMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) CheckChatExist(ctx context.Context, in *CheckChatExistRequest, opts ...grpc.CallOption) (*ResponseData, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseData)
	err := c.cc.Invoke(ctx, ChatService_CheckChatExist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) GetChatMsgDisplayList(ctx context.Context, in *CommonRequest, opts ...grpc.CallOption) (*ResponseData, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseData)
	err := c.cc.Invoke(ctx, ChatService_GetChatMsgDisplayList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) GetChatMsg(ctx context.Context, in *GetChatMsgRequest, opts ...grpc.CallOption) (*ResponseData, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseData)
	err := c.cc.Invoke(ctx, ChatService_GetChatMsg_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) CreateHelloChat(ctx context.Context, in *CreateHelloChatRequest, opts ...grpc.CallOption) (*ResponseData, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseData)
	err := c.cc.Invoke(ctx, ChatService_CreateHelloChat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatServiceServer is the server API for ChatService service.
// All implementations must embed UnimplementedChatServiceServer
// for forward compatibility.
type ChatServiceServer interface {
	UpdateUnreadForChat(context.Context, *UpdateUnreadForChatRequest) (*ResponseData, error)
	DeleteChat(context.Context, *DeleteChatRequest) (*ResponseData, error)
	CheckAndCreateChat(context.Context, *CheckAndCreateChatRequest) (*ResponseData, error)
	SendChatMessage(context.Context, *SendChatMessageRequest) (*ResponseData, error)
	CheckChatExist(context.Context, *CheckChatExistRequest) (*ResponseData, error)
	GetChatMsgDisplayList(context.Context, *CommonRequest) (*ResponseData, error)
	GetChatMsg(context.Context, *GetChatMsgRequest) (*ResponseData, error)
	CreateHelloChat(context.Context, *CreateHelloChatRequest) (*ResponseData, error)
	mustEmbedUnimplementedChatServiceServer()
}

// UnimplementedChatServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedChatServiceServer struct{}

func (UnimplementedChatServiceServer) UpdateUnreadForChat(context.Context, *UpdateUnreadForChatRequest) (*ResponseData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUnreadForChat not implemented")
}
func (UnimplementedChatServiceServer) DeleteChat(context.Context, *DeleteChatRequest) (*ResponseData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChat not implemented")
}
func (UnimplementedChatServiceServer) CheckAndCreateChat(context.Context, *CheckAndCreateChatRequest) (*ResponseData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAndCreateChat not implemented")
}
func (UnimplementedChatServiceServer) SendChatMessage(context.Context, *SendChatMessageRequest) (*ResponseData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendChatMessage not implemented")
}
func (UnimplementedChatServiceServer) CheckChatExist(context.Context, *CheckChatExistRequest) (*ResponseData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckChatExist not implemented")
}
func (UnimplementedChatServiceServer) GetChatMsgDisplayList(context.Context, *CommonRequest) (*ResponseData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChatMsgDisplayList not implemented")
}
func (UnimplementedChatServiceServer) GetChatMsg(context.Context, *GetChatMsgRequest) (*ResponseData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChatMsg not implemented")
}
func (UnimplementedChatServiceServer) CreateHelloChat(context.Context, *CreateHelloChatRequest) (*ResponseData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHelloChat not implemented")
}
func (UnimplementedChatServiceServer) mustEmbedUnimplementedChatServiceServer() {}
func (UnimplementedChatServiceServer) testEmbeddedByValue()                     {}

// UnsafeChatServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatServiceServer will
// result in compilation errors.
type UnsafeChatServiceServer interface {
	mustEmbedUnimplementedChatServiceServer()
}

func RegisterChatServiceServer(s grpc.ServiceRegistrar, srv ChatServiceServer) {
	// If the following call pancis, it indicates UnimplementedChatServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ChatService_ServiceDesc, srv)
}

func _ChatService_UpdateUnreadForChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUnreadForChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).UpdateUnreadForChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_UpdateUnreadForChat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).UpdateUnreadForChat(ctx, req.(*UpdateUnreadForChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_DeleteChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).DeleteChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_DeleteChat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).DeleteChat(ctx, req.(*DeleteChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_CheckAndCreateChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckAndCreateChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).CheckAndCreateChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_CheckAndCreateChat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).CheckAndCreateChat(ctx, req.(*CheckAndCreateChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_SendChatMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendChatMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).SendChatMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_SendChatMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).SendChatMessage(ctx, req.(*SendChatMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_CheckChatExist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckChatExistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).CheckChatExist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_CheckChatExist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).CheckChatExist(ctx, req.(*CheckChatExistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_GetChatMsgDisplayList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).GetChatMsgDisplayList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_GetChatMsgDisplayList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).GetChatMsgDisplayList(ctx, req.(*CommonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_GetChatMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChatMsgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).GetChatMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_GetChatMsg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).GetChatMsg(ctx, req.(*GetChatMsgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_CreateHelloChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHelloChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).CreateHelloChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_CreateHelloChat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).CreateHelloChat(ctx, req.(*CreateHelloChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ChatService_ServiceDesc is the grpc.ServiceDesc for ChatService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "crchat.ChatService",
	HandlerType: (*ChatServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateUnreadForChat",
			Handler:    _ChatService_UpdateUnreadForChat_Handler,
		},
		{
			MethodName: "DeleteChat",
			Handler:    _ChatService_DeleteChat_Handler,
		},
		{
			MethodName: "CheckAndCreateChat",
			Handler:    _ChatService_CheckAndCreateChat_Handler,
		},
		{
			MethodName: "SendChatMessage",
			Handler:    _ChatService_SendChatMessage_Handler,
		},
		{
			MethodName: "CheckChatExist",
			Handler:    _ChatService_CheckChatExist_Handler,
		},
		{
			MethodName: "GetChatMsgDisplayList",
			Handler:    _ChatService_GetChatMsgDisplayList_Handler,
		},
		{
			MethodName: "GetChatMsg",
			Handler:    _ChatService_GetChatMsg_Handler,
		},
		{
			MethodName: "CreateHelloChat",
			Handler:    _ChatService_CreateHelloChat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chat.proto",
}
