// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v4.22.4
// source: pkg/pb/auth.proto

package pb

import (
	"crassets/pkg/logpack"
	"net/http"

	"gorm.io/gorm"
)

type RequestData struct {
	Request   http.Request
	AuthToken string
	LoginId int64
	LoginName string
	Role int
	DataMap map[string]any
}

type ResponseData struct {
	IsError   bool        `json:"error"`
	ErrorCode string      `json:"errorCode"`
	Msg       string      `json:"msg"`
	Data      interface{} `json:"data"`
}

func ResponseLoginRollbackError(loginId int64, tx *gorm.DB, msg string, funcName string, err error) *ResponseData {
	tx.Rollback()
	return ResponseLoginError(loginId, msg, funcName, err)
}

func ResponseLoginError(loginId int64, msg string, funcName string, err error) *ResponseData{
	if loginId <= 0 {
		logpack.Error(msg, funcName, err)
	} else {
		logpack.FError(msg, loginId, funcName, err)
	}

	return &ResponseData{
		IsError: true,
		Msg:     msg,
	}
}

func ResponseLoginErrorWithCode(loginId int64, errCode string, msg string, funcName string, err error) *ResponseData{
	if loginId <= 0 {
		logpack.Error(msg, funcName, err)
	} else {
		logpack.FError(msg, loginId, funcName, err)
	}
	return &ResponseData{
		IsError:   true,
		ErrorCode: errCode,
		Msg:       msg,
	}
}


func ResponseError(msg string, funcName string, err error) *ResponseData{
	logpack.Error(msg, funcName, err)
	return &ResponseData{
		IsError: true,
		Msg:     msg,
	}
}

func ResponseSuccessfully(loginId int64, msg string, funcName string) *ResponseData{
	if loginId <= 0 {
		logpack.Info(msg, funcName)
	} else {
		logpack.FInfo(msg, loginId, funcName)
	}
	return &ResponseData{
		IsError: false,
		Msg:     msg,
	}
}

func ResponseSuccessfullyWithAnyData(loginId int64, msg, funcName string, result any) *ResponseData{
	if loginId <= 0 {
		logpack.Info(msg, funcName)
	} else {
		logpack.FInfo(msg, loginId, funcName)
	}
	return &ResponseData{
		IsError: false,
		Data:    result,
	}
}

func ResponseSuccessfullyWithAnyDataNoLog(result any) *ResponseData{
	return &ResponseData{
		IsError: false,
		Data:    result,
	}
}