// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.22.4
// source: pkg/pb/auth.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuthServiceServer is the server API for AuthService service.
// All implementations must embed UnimplementedAuthServiceServer
// for forward compatibility
type AuthServiceServer interface {
	BeginRegistration(reqData *RequestData) *ResponseData
	CancelRegister(reqData *RequestData) *ResponseData
	FinishUpdatePasskey(reqData *RequestData) *ResponseData
	FinishRegistration(reqData *RequestData) *ResponseData
	AssertionOptions() *ResponseData
	AssertionResult(reqData *RequestData) *ResponseData
	BeginConfirmPasskey(reqData *RequestData) *ResponseData
	FinishConfirmPasskey(req *RequestData) *ResponseData
	ChangeUsernameFinish(reqData *RequestData) *ResponseData
	SyncUsernameDB(reqData *RequestData) *ResponseData
	GetAdminUserList(reqData *RequestData) *ResponseData
	GetUserInfoByUsername(reqData *RequestData) *ResponseData
	GetAdminUserInfo(reqData *RequestData) *ResponseData
	GetExcludeLoginUserNameList(reqData *RequestData) *ResponseData
	ChangeUserStatus(reqData *RequestData) *ResponseData
	IsLoggingOn(reqData *RequestData) *ResponseData
	GenRandomUsername(reqData *RequestData) *ResponseData
	mustEmbedUnimplementedAuthServiceServer()
}

type UnsafeAuthServiceServer interface {
	mustEmbedUnimplementedAuthServiceServer()
}

type UnimplementedAuthServiceServer struct {
}
func (UnimplementedAuthServiceServer) mustEmbedUnimplementedAuthServiceServer() {}

func (UnimplementedAuthServiceServer) BeginRegistration(*RequestData) *ResponseData{
	return &ResponseData{
		IsError: true,
		Msg: "method BeginRegistration not implemented",
	}
}

func (UnimplementedAuthServiceServer) CancelRegister(*RequestData) *ResponseData{
	return &ResponseData{
		IsError: true,
		Msg: "method CancelRegister not implemented",
	}
}

func (UnimplementedAuthServiceServer) FinishUpdatePasskey(*RequestData) *ResponseData{
	return &ResponseData{
		IsError: true,
		Msg: "method FinishUpdatePasskey not implemented",
	}
}

func (UnimplementedAuthServiceServer) FinishRegistration(*RequestData) *ResponseData{
	return &ResponseData{
		IsError: true,
		Msg: "method FinishRegistration not implemented",
	}
}

func (UnimplementedAuthServiceServer) AssertionOptions() *ResponseData{
	return &ResponseData{
		IsError: true,
		Msg: "method AssertionOptions not implemented",
	}
}

func (UnimplementedAuthServiceServer) AssertionResult(*RequestData) *ResponseData{
	return &ResponseData{
		IsError: true,
		Msg: "method AssertionResult not implemented",
	}
}

func (UnimplementedAuthServiceServer) BeginConfirmPasskey(*RequestData) *ResponseData{
	return &ResponseData{
		IsError: true,
		Msg: "method BeginConfirmPasskey not implemented",
	}
}

func (UnimplementedAuthServiceServer) FinishConfirmPasskey(*RequestData) *ResponseData{
	return &ResponseData{
		IsError: true,
		Msg: "method FinishConfirmPasskey not implemented",
	}
}

func (UnimplementedAuthServiceServer) ChangeUsernameFinish(*RequestData) *ResponseData{
	return &ResponseData{
		IsError: true,
		Msg: "method ChangeUsernameFinish not implemented",
	}
}

func (UnimplementedAuthServiceServer) SyncUsernameDB(*RequestData) *ResponseData{
	return &ResponseData{
		IsError: true,
		Msg: "method SyncUsernameDB not implemented",
	}
}

func (UnimplementedAuthServiceServer) GetAdminUserList(*RequestData) *ResponseData{
	return &ResponseData{
		IsError: true,
		Msg: "method GetAdminUserList not implemented",
	}
}

func (UnimplementedAuthServiceServer) GetUserInfoByUsername(*RequestData) *ResponseData{
	return &ResponseData{
		IsError: true,
		Msg: "method GetUserInfoByUsername not implemented",
	}
}

func (UnimplementedAuthServiceServer) GetAdminUserInfo(*RequestData) *ResponseData{
	return &ResponseData{
		IsError: true,
		Msg: "method GetAdminUserInfo not implemented",
	}
}

func (UnimplementedAuthServiceServer) GetExcludeLoginUserNameList(*RequestData) *ResponseData{
	return &ResponseData{
		IsError: true,
		Msg: "method GetExcludeLoginUserNameList not implemented",
	}
}

func (UnimplementedAuthServiceServer) ChangeUserStatus(*RequestData) *ResponseData{
	return &ResponseData{
		IsError: true,
		Msg: "method ChangeUserStatus not implemented",
	}
}

func (UnimplementedAuthServiceServer) IsLoggingOn(*RequestData) *ResponseData{
	return &ResponseData{
		IsError: true,
		Msg: "method IsLoggingOn not implemented",
	}
}

func (UnimplementedAuthServiceServer) GenRandomUsername(*RequestData) *ResponseData{
	return &ResponseData{
		IsError: true,
		Msg: "method GenRandomUsername not implemented",
	}
}

func RegisterAuthServiceServer(s grpc.ServiceRegistrar, srv AuthServiceServer) {
	s.RegisterService(&AuthService_ServiceDesc, srv)
}

func BeginRegistration_hanlder(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).BeginRegistration(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/BeginRegistration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).BeginRegistration(req.(*RequestData)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func CancelRegister_hanlder(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).CancelRegister(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/CancelRegister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).CancelRegister(req.(*RequestData)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func FinishUpdatePasskey_hanlder(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).FinishUpdatePasskey(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/FinishUpdatePasskey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).FinishUpdatePasskey(req.(*RequestData)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func FinishRegistration_hanlder(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).FinishRegistration(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/FinishRegistration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).FinishRegistration(req.(*RequestData)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func AssertionOptions_hanlder(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).AssertionOptions(), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/AssertionOptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).AssertionOptions(), nil
	}
	return interceptor(ctx, in, info, handler)
}

func AssertionResult_hanlder(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).AssertionResult(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/AssertionResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).AssertionResult(req.(*RequestData)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func BeginConfirmPasskey_hanlder(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).BeginConfirmPasskey(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/BeginConfirmPasskey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).BeginConfirmPasskey(req.(*RequestData)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func FinishConfirmPasskey_hanlder(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).FinishConfirmPasskey(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/FinishConfirmPasskey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).FinishConfirmPasskey(req.(*RequestData)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func ChangeUsernameFinish_hanlder(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ChangeUsernameFinish(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/ChangeUsernameFinish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ChangeUsernameFinish(req.(*RequestData)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func SyncUsernameDB_hanlder(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).SyncUsernameDB(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/SyncUsernameDB",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).SyncUsernameDB(req.(*RequestData)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func GetAdminUserList_hanlder(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetAdminUserList(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/GetAdminUserList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetAdminUserList(req.(*RequestData)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func GetUserInfoByUsername_hanlder(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetUserInfoByUsername(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/GetUserInfoByUsername",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetUserInfoByUsername(req.(*RequestData)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func GetAdminUserInfo_hanlder(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetAdminUserInfo(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/GetAdminUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetAdminUserInfo(req.(*RequestData)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func GetExcludeLoginUserNameList_hanlder(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetExcludeLoginUserNameList(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/GetExcludeLoginUserNameList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetExcludeLoginUserNameList(req.(*RequestData)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func ChangeUserStatus_hanlder(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ChangeUserStatus(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/ChangeUserStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ChangeUserStatus(req.(*RequestData)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func IsLoggingOn_hanlder(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).IsLoggingOn(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/IsLoggingOn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).IsLoggingOn(req.(*RequestData)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func GenRandomUsername_hanlder(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GenRandomUsername(in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/GenRandomUsername",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GenRandomUsername(req.(*RequestData)), nil
	}
	return interceptor(ctx, in, info, handler)
}

// AuthService_ServiceDesc is the grpc.ServiceDesc for AuthService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth.AuthService",
	HandlerType: (*AuthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BeginRegistration",
			Handler:    BeginRegistration_hanlder,
		},
		{
			MethodName: "CancelRegister",
			Handler:    CancelRegister_hanlder,
		},
		{
			MethodName: "FinishUpdatePasskey",
			Handler:    FinishUpdatePasskey_hanlder,
		},
		{
			MethodName: "FinishRegistration",
			Handler:    FinishRegistration_hanlder,
		},
		{
			MethodName: "AssertionOptions",
			Handler:    AssertionOptions_hanlder,
		},
		{
			MethodName: "AssertionResult",
			Handler:    AssertionResult_hanlder,
		},
		{
			MethodName: "BeginConfirmPasskey",
			Handler:    BeginConfirmPasskey_hanlder,
		},
		{
			MethodName: "FinishConfirmPasskey",
			Handler:    FinishConfirmPasskey_hanlder,
		},
		{
			MethodName: "ChangeUsernameFinish",
			Handler:    ChangeUsernameFinish_hanlder,
		},
		{
			MethodName: "SyncUsernameDB",
			Handler:    SyncUsernameDB_hanlder,
		},
		{
			MethodName: "GetAdminUserList",
			Handler:    GetAdminUserList_hanlder,
		},
		{
			MethodName: "GetUserInfoByUsername",
			Handler:    GetUserInfoByUsername_hanlder,
		},
		{
			MethodName: "GetAdminUserInfo",
			Handler:    GetAdminUserInfo_hanlder,
		},
		{
			MethodName: "GetExcludeLoginUserNameList",
			Handler:    GetExcludeLoginUserNameList_hanlder,
		},
		{
			MethodName: "ChangeUserStatus",
			Handler:    ChangeUserStatus_hanlder,
		},
		{
			MethodName: "IsLoggingOn",
			Handler:    IsLoggingOn_hanlder,
		},
		{
			MethodName: "GenRandomUsername",
			Handler:    GenRandomUsername_hanlder,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/pb/auth.proto",
}
