// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.6.1
// source: assets.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type OneStringRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common *CommonRequest `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	Data   string         `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *OneStringRequest) Reset() {
	*x = OneStringRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_assets_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OneStringRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OneStringRequest) ProtoMessage() {}

func (x *OneStringRequest) ProtoReflect() protoreflect.Message {
	mi := &file_assets_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OneStringRequest.ProtoReflect.Descriptor instead.
func (*OneStringRequest) Descriptor() ([]byte, []int) {
	return file_assets_proto_rawDescGZIP(), []int{0}
}

func (x *OneStringRequest) GetCommon() *CommonRequest {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *OneStringRequest) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type OneIntegerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common *CommonRequest `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	Data   int64          `protobuf:"varint,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *OneIntegerRequest) Reset() {
	*x = OneIntegerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_assets_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OneIntegerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OneIntegerRequest) ProtoMessage() {}

func (x *OneIntegerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_assets_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OneIntegerRequest.ProtoReflect.Descriptor instead.
func (*OneIntegerRequest) Descriptor() ([]byte, []int) {
	return file_assets_proto_rawDescGZIP(), []int{1}
}

func (x *OneIntegerRequest) GetCommon() *CommonRequest {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *OneIntegerRequest) GetData() int64 {
	if x != nil {
		return x.Data
	}
	return 0
}

type SendTradingDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common      *CommonRequest `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	Asset       string         `protobuf:"bytes,2,opt,name=asset,proto3" json:"asset,omitempty"`
	TradingType string         `protobuf:"bytes,3,opt,name=tradingType,proto3" json:"tradingType,omitempty"`
	PaymentType string         `protobuf:"bytes,4,opt,name=paymentType,proto3" json:"paymentType,omitempty"`
	Amount      float64        `protobuf:"fixed64,5,opt,name=amount,proto3" json:"amount,omitempty"`
	Rate        float64        `protobuf:"fixed64,6,opt,name=rate,proto3" json:"rate,omitempty"`
}

func (x *SendTradingDataRequest) Reset() {
	*x = SendTradingDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_assets_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendTradingDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendTradingDataRequest) ProtoMessage() {}

func (x *SendTradingDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_assets_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendTradingDataRequest.ProtoReflect.Descriptor instead.
func (*SendTradingDataRequest) Descriptor() ([]byte, []int) {
	return file_assets_proto_rawDescGZIP(), []int{2}
}

func (x *SendTradingDataRequest) GetCommon() *CommonRequest {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *SendTradingDataRequest) GetAsset() string {
	if x != nil {
		return x.Asset
	}
	return ""
}

func (x *SendTradingDataRequest) GetTradingType() string {
	if x != nil {
		return x.TradingType
	}
	return ""
}

func (x *SendTradingDataRequest) GetPaymentType() string {
	if x != nil {
		return x.PaymentType
	}
	return ""
}

func (x *SendTradingDataRequest) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *SendTradingDataRequest) GetRate() float64 {
	if x != nil {
		return x.Rate
	}
	return 0
}

type ConfirmWithdrawalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common *CommonRequest `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	Target string         `protobuf:"bytes,2,opt,name=target,proto3" json:"target,omitempty"`
	Code   string         `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *ConfirmWithdrawalRequest) Reset() {
	*x = ConfirmWithdrawalRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_assets_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfirmWithdrawalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfirmWithdrawalRequest) ProtoMessage() {}

func (x *ConfirmWithdrawalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_assets_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfirmWithdrawalRequest.ProtoReflect.Descriptor instead.
func (*ConfirmWithdrawalRequest) Descriptor() ([]byte, []int) {
	return file_assets_proto_rawDescGZIP(), []int{3}
}

func (x *ConfirmWithdrawalRequest) GetCommon() *CommonRequest {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *ConfirmWithdrawalRequest) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *ConfirmWithdrawalRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type UpdateLabelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common       *CommonRequest `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	AssetId      int64          `protobuf:"varint,2,opt,name=assetId,proto3" json:"assetId,omitempty"`
	AddressId    int64          `protobuf:"varint,3,opt,name=addressId,proto3" json:"addressId,omitempty"`
	NewMainLabel string         `protobuf:"bytes,4,opt,name=newMainLabel,proto3" json:"newMainLabel,omitempty"`
	AssetType    string         `protobuf:"bytes,5,opt,name=assetType,proto3" json:"assetType,omitempty"`
}

func (x *UpdateLabelRequest) Reset() {
	*x = UpdateLabelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_assets_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateLabelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateLabelRequest) ProtoMessage() {}

func (x *UpdateLabelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_assets_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateLabelRequest.ProtoReflect.Descriptor instead.
func (*UpdateLabelRequest) Descriptor() ([]byte, []int) {
	return file_assets_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateLabelRequest) GetCommon() *CommonRequest {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *UpdateLabelRequest) GetAssetId() int64 {
	if x != nil {
		return x.AssetId
	}
	return 0
}

func (x *UpdateLabelRequest) GetAddressId() int64 {
	if x != nil {
		return x.AddressId
	}
	return 0
}

func (x *UpdateLabelRequest) GetNewMainLabel() string {
	if x != nil {
		return x.NewMainLabel
	}
	return ""
}

func (x *UpdateLabelRequest) GetAssetType() string {
	if x != nil {
		return x.AssetType
	}
	return ""
}

type GetAddressListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common  *CommonRequest `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	AssetId int64          `protobuf:"varint,2,opt,name=assetId,proto3" json:"assetId,omitempty"`
	Status  string         `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *GetAddressListRequest) Reset() {
	*x = GetAddressListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_assets_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAddressListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAddressListRequest) ProtoMessage() {}

func (x *GetAddressListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_assets_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAddressListRequest.ProtoReflect.Descriptor instead.
func (*GetAddressListRequest) Descriptor() ([]byte, []int) {
	return file_assets_proto_rawDescGZIP(), []int{5}
}

func (x *GetAddressListRequest) GetCommon() *CommonRequest {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *GetAddressListRequest) GetAssetId() int64 {
	if x != nil {
		return x.AssetId
	}
	return 0
}

func (x *GetAddressListRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type GetCodeListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common     *CommonRequest `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	Asset      string         `protobuf:"bytes,2,opt,name=asset,proto3" json:"asset,omitempty"`
	CodeStatus string         `protobuf:"bytes,3,opt,name=codeStatus,proto3" json:"codeStatus,omitempty"`
}

func (x *GetCodeListRequest) Reset() {
	*x = GetCodeListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_assets_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCodeListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCodeListRequest) ProtoMessage() {}

func (x *GetCodeListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_assets_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCodeListRequest.ProtoReflect.Descriptor instead.
func (*GetCodeListRequest) Descriptor() ([]byte, []int) {
	return file_assets_proto_rawDescGZIP(), []int{6}
}

func (x *GetCodeListRequest) GetCommon() *CommonRequest {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *GetCodeListRequest) GetAsset() string {
	if x != nil {
		return x.Asset
	}
	return ""
}

func (x *GetCodeListRequest) GetCodeStatus() string {
	if x != nil {
		return x.CodeStatus
	}
	return ""
}

type FilterTxHistoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common      *CommonRequest `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	AllowAssets string         `protobuf:"bytes,2,opt,name=allowAssets,proto3" json:"allowAssets,omitempty"`
	Type        string         `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Direction   string         `protobuf:"bytes,4,opt,name=direction,proto3" json:"direction,omitempty"`
	PerPage     int64          `protobuf:"varint,5,opt,name=perPage,proto3" json:"perPage,omitempty"`
	PageNum     int64          `protobuf:"varint,6,opt,name=pageNum,proto3" json:"pageNum,omitempty"`
}

func (x *FilterTxHistoryRequest) Reset() {
	*x = FilterTxHistoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_assets_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterTxHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterTxHistoryRequest) ProtoMessage() {}

func (x *FilterTxHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_assets_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterTxHistoryRequest.ProtoReflect.Descriptor instead.
func (*FilterTxHistoryRequest) Descriptor() ([]byte, []int) {
	return file_assets_proto_rawDescGZIP(), []int{7}
}

func (x *FilterTxHistoryRequest) GetCommon() *CommonRequest {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *FilterTxHistoryRequest) GetAllowAssets() string {
	if x != nil {
		return x.AllowAssets
	}
	return ""
}

func (x *FilterTxHistoryRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *FilterTxHistoryRequest) GetDirection() string {
	if x != nil {
		return x.Direction
	}
	return ""
}

func (x *FilterTxHistoryRequest) GetPerPage() int64 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

func (x *FilterTxHistoryRequest) GetPageNum() int64 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

type ConfirmAmountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common    *CommonRequest `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	Asset     string         `protobuf:"bytes,2,opt,name=asset,proto3" json:"asset,omitempty"`
	ToAddress string         `protobuf:"bytes,3,opt,name=toAddress,proto3" json:"toAddress,omitempty"`
	SendBy    string         `protobuf:"bytes,4,opt,name=sendBy,proto3" json:"sendBy,omitempty"`
	Amount    float64        `protobuf:"fixed64,5,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *ConfirmAmountRequest) Reset() {
	*x = ConfirmAmountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_assets_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfirmAmountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfirmAmountRequest) ProtoMessage() {}

func (x *ConfirmAmountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_assets_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfirmAmountRequest.ProtoReflect.Descriptor instead.
func (*ConfirmAmountRequest) Descriptor() ([]byte, []int) {
	return file_assets_proto_rawDescGZIP(), []int{8}
}

func (x *ConfirmAmountRequest) GetCommon() *CommonRequest {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *ConfirmAmountRequest) GetAsset() string {
	if x != nil {
		return x.Asset
	}
	return ""
}

func (x *ConfirmAmountRequest) GetToAddress() string {
	if x != nil {
		return x.ToAddress
	}
	return ""
}

func (x *ConfirmAmountRequest) GetSendBy() string {
	if x != nil {
		return x.SendBy
	}
	return ""
}

func (x *ConfirmAmountRequest) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type TransferAmountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common       *CommonRequest `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	Currency     string         `protobuf:"bytes,2,opt,name=currency,proto3" json:"currency,omitempty"`
	Amount       float64        `protobuf:"fixed64,3,opt,name=amount,proto3" json:"amount,omitempty"`
	Receiver     string         `protobuf:"bytes,4,opt,name=receiver,proto3" json:"receiver,omitempty"`
	ReceiverRole int64          `protobuf:"varint,5,opt,name=receiverRole,proto3" json:"receiverRole,omitempty"`
	Rate         float64        `protobuf:"fixed64,6,opt,name=rate,proto3" json:"rate,omitempty"`
	Note         string         `protobuf:"bytes,7,opt,name=note,proto3" json:"note,omitempty"`
	SendBy       string         `protobuf:"bytes,8,opt,name=sendBy,proto3" json:"sendBy,omitempty"`
	Address      string         `protobuf:"bytes,9,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *TransferAmountRequest) Reset() {
	*x = TransferAmountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_assets_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferAmountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferAmountRequest) ProtoMessage() {}

func (x *TransferAmountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_assets_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferAmountRequest.ProtoReflect.Descriptor instead.
func (*TransferAmountRequest) Descriptor() ([]byte, []int) {
	return file_assets_proto_rawDescGZIP(), []int{9}
}

func (x *TransferAmountRequest) GetCommon() *CommonRequest {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *TransferAmountRequest) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *TransferAmountRequest) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *TransferAmountRequest) GetReceiver() string {
	if x != nil {
		return x.Receiver
	}
	return ""
}

func (x *TransferAmountRequest) GetReceiverRole() int64 {
	if x != nil {
		return x.ReceiverRole
	}
	return 0
}

func (x *TransferAmountRequest) GetRate() float64 {
	if x != nil {
		return x.Rate
	}
	return 0
}

func (x *TransferAmountRequest) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *TransferAmountRequest) GetSendBy() string {
	if x != nil {
		return x.SendBy
	}
	return ""
}

func (x *TransferAmountRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type GetUserAssetDBRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common   *CommonRequest `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	Username string         `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Type     string         `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *GetUserAssetDBRequest) Reset() {
	*x = GetUserAssetDBRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_assets_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserAssetDBRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserAssetDBRequest) ProtoMessage() {}

func (x *GetUserAssetDBRequest) ProtoReflect() protoreflect.Message {
	mi := &file_assets_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserAssetDBRequest.ProtoReflect.Descriptor instead.
func (*GetUserAssetDBRequest) Descriptor() ([]byte, []int) {
	return file_assets_proto_rawDescGZIP(), []int{10}
}

func (x *GetUserAssetDBRequest) GetCommon() *CommonRequest {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *GetUserAssetDBRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *GetUserAssetDBRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type CountAddressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common    *CommonRequest `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	AssetId   int64          `protobuf:"varint,2,opt,name=assetId,proto3" json:"assetId,omitempty"`
	ActiveFlg bool           `protobuf:"varint,3,opt,name=activeFlg,proto3" json:"activeFlg,omitempty"`
}

func (x *CountAddressRequest) Reset() {
	*x = CountAddressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_assets_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountAddressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountAddressRequest) ProtoMessage() {}

func (x *CountAddressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_assets_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountAddressRequest.ProtoReflect.Descriptor instead.
func (*CountAddressRequest) Descriptor() ([]byte, []int) {
	return file_assets_proto_rawDescGZIP(), []int{11}
}

func (x *CountAddressRequest) GetCommon() *CommonRequest {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *CountAddressRequest) GetAssetId() int64 {
	if x != nil {
		return x.AssetId
	}
	return 0
}

func (x *CountAddressRequest) GetActiveFlg() bool {
	if x != nil {
		return x.ActiveFlg
	}
	return false
}

type FilterTxCodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common    *CommonRequest `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	AssetType string         `protobuf:"bytes,2,opt,name=assetType,proto3" json:"assetType,omitempty"`
	Status    string         `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *FilterTxCodeRequest) Reset() {
	*x = FilterTxCodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_assets_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterTxCodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterTxCodeRequest) ProtoMessage() {}

func (x *FilterTxCodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_assets_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterTxCodeRequest.ProtoReflect.Descriptor instead.
func (*FilterTxCodeRequest) Descriptor() ([]byte, []int) {
	return file_assets_proto_rawDescGZIP(), []int{12}
}

func (x *FilterTxCodeRequest) GetCommon() *CommonRequest {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *FilterTxCodeRequest) GetAssetType() string {
	if x != nil {
		return x.AssetType
	}
	return ""
}

func (x *FilterTxCodeRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type CheckAddressMatchWithUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common    *CommonRequest `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	AssetId   int64          `protobuf:"varint,2,opt,name=assetId,proto3" json:"assetId,omitempty"`
	AddressId int64          `protobuf:"varint,3,opt,name=addressId,proto3" json:"addressId,omitempty"`
	Archived  bool           `protobuf:"varint,4,opt,name=archived,proto3" json:"archived,omitempty"`
}

func (x *CheckAddressMatchWithUserRequest) Reset() {
	*x = CheckAddressMatchWithUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_assets_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckAddressMatchWithUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckAddressMatchWithUserRequest) ProtoMessage() {}

func (x *CheckAddressMatchWithUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_assets_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckAddressMatchWithUserRequest.ProtoReflect.Descriptor instead.
func (*CheckAddressMatchWithUserRequest) Descriptor() ([]byte, []int) {
	return file_assets_proto_rawDescGZIP(), []int{13}
}

func (x *CheckAddressMatchWithUserRequest) GetCommon() *CommonRequest {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *CheckAddressMatchWithUserRequest) GetAssetId() int64 {
	if x != nil {
		return x.AssetId
	}
	return 0
}

func (x *CheckAddressMatchWithUserRequest) GetAddressId() int64 {
	if x != nil {
		return x.AddressId
	}
	return 0
}

func (x *CheckAddressMatchWithUserRequest) GetArchived() bool {
	if x != nil {
		return x.Archived
	}
	return false
}

type CheckAndCreateAccountTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common   *CommonRequest `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	Username string         `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Role     int64          `protobuf:"varint,3,opt,name=role,proto3" json:"role,omitempty"`
}

func (x *CheckAndCreateAccountTokenRequest) Reset() {
	*x = CheckAndCreateAccountTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_assets_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckAndCreateAccountTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckAndCreateAccountTokenRequest) ProtoMessage() {}

func (x *CheckAndCreateAccountTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_assets_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckAndCreateAccountTokenRequest.ProtoReflect.Descriptor instead.
func (*CheckAndCreateAccountTokenRequest) Descriptor() ([]byte, []int) {
	return file_assets_proto_rawDescGZIP(), []int{14}
}

func (x *CheckAndCreateAccountTokenRequest) GetCommon() *CommonRequest {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *CheckAndCreateAccountTokenRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *CheckAndCreateAccountTokenRequest) GetRole() int64 {
	if x != nil {
		return x.Role
	}
	return 0
}

type FilterAddressListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common  *CommonRequest `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	AssetId int64          `protobuf:"varint,2,opt,name=assetId,proto3" json:"assetId,omitempty"`
	Status  string         `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *FilterAddressListRequest) Reset() {
	*x = FilterAddressListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_assets_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterAddressListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterAddressListRequest) ProtoMessage() {}

func (x *FilterAddressListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_assets_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterAddressListRequest.ProtoReflect.Descriptor instead.
func (*FilterAddressListRequest) Descriptor() ([]byte, []int) {
	return file_assets_proto_rawDescGZIP(), []int{15}
}

func (x *FilterAddressListRequest) GetCommon() *CommonRequest {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *FilterAddressListRequest) GetAssetId() int64 {
	if x != nil {
		return x.AssetId
	}
	return 0
}

func (x *FilterAddressListRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type ConfirmAddressActionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common    *CommonRequest `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	AssetId   int64          `protobuf:"varint,2,opt,name=assetId,proto3" json:"assetId,omitempty"`
	AddressId int64          `protobuf:"varint,3,opt,name=addressId,proto3" json:"addressId,omitempty"`
	Action    string         `protobuf:"bytes,4,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *ConfirmAddressActionRequest) Reset() {
	*x = ConfirmAddressActionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_assets_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfirmAddressActionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfirmAddressActionRequest) ProtoMessage() {}

func (x *ConfirmAddressActionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_assets_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfirmAddressActionRequest.ProtoReflect.Descriptor instead.
func (*ConfirmAddressActionRequest) Descriptor() ([]byte, []int) {
	return file_assets_proto_rawDescGZIP(), []int{16}
}

func (x *ConfirmAddressActionRequest) GetCommon() *CommonRequest {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *ConfirmAddressActionRequest) GetAssetId() int64 {
	if x != nil {
		return x.AssetId
	}
	return 0
}

func (x *ConfirmAddressActionRequest) GetAddressId() int64 {
	if x != nil {
		return x.AddressId
	}
	return 0
}

func (x *ConfirmAddressActionRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

type CommonRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthToken string `protobuf:"bytes,2,opt,name=authToken,proto3" json:"authToken,omitempty"`
	LoginName string `protobuf:"bytes,4,opt,name=loginName,proto3" json:"loginName,omitempty"`
	Role      int64  `protobuf:"varint,5,opt,name=role,proto3" json:"role,omitempty"`
}

func (x *CommonRequest) Reset() {
	*x = CommonRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_assets_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonRequest) ProtoMessage() {}

func (x *CommonRequest) ProtoReflect() protoreflect.Message {
	mi := &file_assets_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonRequest.ProtoReflect.Descriptor instead.
func (*CommonRequest) Descriptor() ([]byte, []int) {
	return file_assets_proto_rawDescGZIP(), []int{17}
}

func (x *CommonRequest) GetAuthToken() string {
	if x != nil {
		return x.AuthToken
	}
	return ""
}

func (x *CommonRequest) GetLoginName() string {
	if x != nil {
		return x.LoginName
	}
	return ""
}

func (x *CommonRequest) GetRole() int64 {
	if x != nil {
		return x.Role
	}
	return 0
}

type ResponseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error bool   `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Code  string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	Msg   string `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
	Data  string `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ResponseData) Reset() {
	*x = ResponseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_assets_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseData) ProtoMessage() {}

func (x *ResponseData) ProtoReflect() protoreflect.Message {
	mi := &file_assets_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseData.ProtoReflect.Descriptor instead.
func (*ResponseData) Descriptor() ([]byte, []int) {
	return file_assets_proto_rawDescGZIP(), []int{18}
}

func (x *ResponseData) GetError() bool {
	if x != nil {
		return x.Error
	}
	return false
}

func (x *ResponseData) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *ResponseData) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *ResponseData) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

var File_assets_proto protoreflect.FileDescriptor

var file_assets_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x22, 0x55, 0x0a, 0x10, 0x4f, 0x6e, 0x65, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x06, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x56, 0x0a,
	0x11, 0x4f, 0x6e, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2d, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xcd, 0x01, 0x0a, 0x16, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x72,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2d, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x04, 0x72, 0x61, 0x74, 0x65, 0x22, 0x75, 0x0a, 0x18, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d,
	0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2d, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xbd, 0x01, 0x0a,
	0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x6e, 0x65,
	0x77, 0x4d, 0x61, 0x69, 0x6e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x6e, 0x65, 0x77, 0x4d, 0x61, 0x69, 0x6e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x1c,
	0x0a, 0x09, 0x61, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x61, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x78, 0x0a, 0x15,
	0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x06, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x79, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x06,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0xcf, 0x01, 0x0a, 0x16, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x78, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x06,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x67,
	0x65, 0x4e, 0x75, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65,
	0x4e, 0x75, 0x6d, 0x22, 0xa9, 0x01, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x06,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x42, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x65, 0x6e, 0x64, 0x42, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0x94, 0x02, 0x0a, 0x15, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x06, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x72, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x72, 0x61, 0x74, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x6f, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x42, 0x79, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x42, 0x79, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x76, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x41, 0x73, 0x73, 0x65, 0x74, 0x44, 0x42, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2d, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x7c,
	0x0a, 0x13, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x06, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x46, 0x6c, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x46, 0x6c, 0x67, 0x22, 0x7a, 0x0a, 0x13,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x78, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xa5, 0x01, 0x0a, 0x20, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x57, 0x69,
	0x74, 0x68, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a,
	0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64,
	0x22, 0x82, 0x01, 0x0a, 0x21, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x41, 0x6e, 0x64, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x06, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x72, 0x6f, 0x6c, 0x65, 0x22, 0x7b, 0x0a, 0x18, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2d, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x9c, 0x01, 0x0a, 0x1b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2d, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x5f, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x72, 0x6f,
	0x6c, 0x65, 0x22, 0x5e, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x32, 0xde, 0x0f, 0x0a, 0x0d, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x42, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65,
	0x77, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x73, 0x2e, 0x4f, 0x6e, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x14, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x10, 0x53, 0x79, 0x6e, 0x63,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x15, 0x2e, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x4a, 0x0a, 0x12, 0x53, 0x65, 0x6e,
	0x64, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1e, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x72, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x14, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x45, 0x0a, 0x0e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3e, 0x0a, 0x0c,
	0x41, 0x64, 0x64, 0x54, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x18, 0x2e, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x4f, 0x6e, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x47, 0x0a, 0x0f,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x78, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12,
	0x1e, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54,
	0x78, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x14, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x43, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x73, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x53, 0x0a, 0x1c, 0x47, 0x65,
	0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x57, 0x69, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x2e, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x43, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1c, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72,
	0x6d, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14,
	0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x4b, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x57,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x12, 0x20, 0x2e, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x42, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x12, 0x1a, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x14, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x43, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x18, 0x2e, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x73, 0x2e, 0x4f, 0x6e, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x40, 0x0a, 0x0e, 0x47, 0x65,
	0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x44, 0x42, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x2e, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x4f, 0x6e, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x45, 0x0a, 0x0e,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x73, 0x73, 0x65, 0x74, 0x44, 0x42, 0x12, 0x1d,
	0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x44, 0x42, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x41, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x19, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x4f,
	0x6e, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x14, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x41, 0x0a, 0x0c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2e,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x42, 0x0a, 0x10, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x48, 0x61, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x2e,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x4f, 0x6e, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3d, 0x0a,
	0x0e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x15, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x41, 0x0a, 0x0c,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x78, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x2e, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x78, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x3f, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x54, 0x78, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12,
	0x19, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x4f, 0x6e, 0x65, 0x49, 0x6e, 0x74, 0x65,
	0x67, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x4b, 0x0a, 0x11, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x20, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x5d, 0x0a,
	0x1a, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x41, 0x6e, 0x64, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x29, 0x2e, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x73, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x41, 0x6e, 0x64, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x38, 0x0a, 0x09,
	0x46, 0x65, 0x74, 0x63, 0x68, 0x52, 0x61, 0x74, 0x65, 0x12, 0x15, 0x2e, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x14, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x4a, 0x0a, 0x17, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x57, 0x69, 0x74, 0x68, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x19, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x4f, 0x6e, 0x65, 0x49, 0x6e,
	0x74, 0x65, 0x67, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x5b, 0x0a, 0x19, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x57, 0x69, 0x74, 0x68, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x28, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x57, 0x69, 0x74, 0x68, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x3d, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x19, 0x2e,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x4f, 0x6e, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x51,
	0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x40, 0x0a, 0x0d, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x55, 0x72, 0x6c, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x19, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x4f, 0x6e, 0x65, 0x49,
	0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x42, 0x05, 0x5a, 0x03, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_assets_proto_rawDescOnce sync.Once
	file_assets_proto_rawDescData = file_assets_proto_rawDesc
)

func file_assets_proto_rawDescGZIP() []byte {
	file_assets_proto_rawDescOnce.Do(func() {
		file_assets_proto_rawDescData = protoimpl.X.CompressGZIP(file_assets_proto_rawDescData)
	})
	return file_assets_proto_rawDescData
}

var file_assets_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_assets_proto_goTypes = []any{
	(*OneStringRequest)(nil),                  // 0: assets.OneStringRequest
	(*OneIntegerRequest)(nil),                 // 1: assets.OneIntegerRequest
	(*SendTradingDataRequest)(nil),            // 2: assets.SendTradingDataRequest
	(*ConfirmWithdrawalRequest)(nil),          // 3: assets.ConfirmWithdrawalRequest
	(*UpdateLabelRequest)(nil),                // 4: assets.UpdateLabelRequest
	(*GetAddressListRequest)(nil),             // 5: assets.GetAddressListRequest
	(*GetCodeListRequest)(nil),                // 6: assets.GetCodeListRequest
	(*FilterTxHistoryRequest)(nil),            // 7: assets.FilterTxHistoryRequest
	(*ConfirmAmountRequest)(nil),              // 8: assets.ConfirmAmountRequest
	(*TransferAmountRequest)(nil),             // 9: assets.TransferAmountRequest
	(*GetUserAssetDBRequest)(nil),             // 10: assets.GetUserAssetDBRequest
	(*CountAddressRequest)(nil),               // 11: assets.CountAddressRequest
	(*FilterTxCodeRequest)(nil),               // 12: assets.FilterTxCodeRequest
	(*CheckAddressMatchWithUserRequest)(nil),  // 13: assets.CheckAddressMatchWithUserRequest
	(*CheckAndCreateAccountTokenRequest)(nil), // 14: assets.CheckAndCreateAccountTokenRequest
	(*FilterAddressListRequest)(nil),          // 15: assets.FilterAddressListRequest
	(*ConfirmAddressActionRequest)(nil),       // 16: assets.ConfirmAddressActionRequest
	(*CommonRequest)(nil),                     // 17: assets.CommonRequest
	(*ResponseData)(nil),                      // 18: assets.ResponseData
}
var file_assets_proto_depIdxs = []int32{
	17, // 0: assets.OneStringRequest.common:type_name -> assets.CommonRequest
	17, // 1: assets.OneIntegerRequest.common:type_name -> assets.CommonRequest
	17, // 2: assets.SendTradingDataRequest.common:type_name -> assets.CommonRequest
	17, // 3: assets.ConfirmWithdrawalRequest.common:type_name -> assets.CommonRequest
	17, // 4: assets.UpdateLabelRequest.common:type_name -> assets.CommonRequest
	17, // 5: assets.GetAddressListRequest.common:type_name -> assets.CommonRequest
	17, // 6: assets.GetCodeListRequest.common:type_name -> assets.CommonRequest
	17, // 7: assets.FilterTxHistoryRequest.common:type_name -> assets.CommonRequest
	17, // 8: assets.ConfirmAmountRequest.common:type_name -> assets.CommonRequest
	17, // 9: assets.TransferAmountRequest.common:type_name -> assets.CommonRequest
	17, // 10: assets.GetUserAssetDBRequest.common:type_name -> assets.CommonRequest
	17, // 11: assets.CountAddressRequest.common:type_name -> assets.CommonRequest
	17, // 12: assets.FilterTxCodeRequest.common:type_name -> assets.CommonRequest
	17, // 13: assets.CheckAddressMatchWithUserRequest.common:type_name -> assets.CommonRequest
	17, // 14: assets.CheckAndCreateAccountTokenRequest.common:type_name -> assets.CommonRequest
	17, // 15: assets.FilterAddressListRequest.common:type_name -> assets.CommonRequest
	17, // 16: assets.ConfirmAddressActionRequest.common:type_name -> assets.CommonRequest
	0,  // 17: assets.AssetsService.CreateNewAddress:input_type -> assets.OneStringRequest
	17, // 18: assets.AssetsService.SyncTransactions:input_type -> assets.CommonRequest
	2,  // 19: assets.AssetsService.SendTradingRequest:input_type -> assets.SendTradingDataRequest
	9,  // 20: assets.AssetsService.TransferAmount:input_type -> assets.TransferAmountRequest
	0,  // 21: assets.AssetsService.AddToContact:input_type -> assets.OneStringRequest
	7,  // 22: assets.AssetsService.FilterTxHistory:input_type -> assets.FilterTxHistoryRequest
	6,  // 23: assets.AssetsService.GetCodeListData:input_type -> assets.GetCodeListRequest
	5,  // 24: assets.AssetsService.GetAddressListDataWithStatus:input_type -> assets.GetAddressListRequest
	8,  // 25: assets.AssetsService.ConfirmAmount:input_type -> assets.ConfirmAmountRequest
	3,  // 26: assets.AssetsService.ConfirmWithdrawal:input_type -> assets.ConfirmWithdrawalRequest
	4,  // 27: assets.AssetsService.UpdateNewLabel:input_type -> assets.UpdateLabelRequest
	0,  // 28: assets.AssetsService.GetBalanceSummary:input_type -> assets.OneStringRequest
	0,  // 29: assets.AssetsService.GetAssetDBList:input_type -> assets.OneStringRequest
	10, // 30: assets.AssetsService.GetUserAssetDB:input_type -> assets.GetUserAssetDBRequest
	1,  // 31: assets.AssetsService.GetAddressList:input_type -> assets.OneIntegerRequest
	11, // 32: assets.AssetsService.CountAddress:input_type -> assets.CountAddressRequest
	0,  // 33: assets.AssetsService.CheckHasCodeList:input_type -> assets.OneStringRequest
	17, // 34: assets.AssetsService.GetContactList:input_type -> assets.CommonRequest
	12, // 35: assets.AssetsService.FilterTxCode:input_type -> assets.FilterTxCodeRequest
	1,  // 36: assets.AssetsService.GetTxHistory:input_type -> assets.OneIntegerRequest
	15, // 37: assets.AssetsService.FilterAddressList:input_type -> assets.FilterAddressListRequest
	14, // 38: assets.AssetsService.CheckAndCreateAccountToken:input_type -> assets.CheckAndCreateAccountTokenRequest
	17, // 39: assets.AssetsService.FetchRate:input_type -> assets.CommonRequest
	1,  // 40: assets.AssetsService.CheckAssetMatchWithUser:input_type -> assets.OneIntegerRequest
	13, // 41: assets.AssetsService.CheckAddressMatchWithUser:input_type -> assets.CheckAddressMatchWithUserRequest
	1,  // 42: assets.AssetsService.GetAddress:input_type -> assets.OneIntegerRequest
	16, // 43: assets.AssetsService.ConfirmAddressAction:input_type -> assets.ConfirmAddressActionRequest
	1,  // 44: assets.AssetsService.CancelUrlCode:input_type -> assets.OneIntegerRequest
	18, // 45: assets.AssetsService.CreateNewAddress:output_type -> assets.ResponseData
	18, // 46: assets.AssetsService.SyncTransactions:output_type -> assets.ResponseData
	18, // 47: assets.AssetsService.SendTradingRequest:output_type -> assets.ResponseData
	18, // 48: assets.AssetsService.TransferAmount:output_type -> assets.ResponseData
	18, // 49: assets.AssetsService.AddToContact:output_type -> assets.ResponseData
	18, // 50: assets.AssetsService.FilterTxHistory:output_type -> assets.ResponseData
	18, // 51: assets.AssetsService.GetCodeListData:output_type -> assets.ResponseData
	18, // 52: assets.AssetsService.GetAddressListDataWithStatus:output_type -> assets.ResponseData
	18, // 53: assets.AssetsService.ConfirmAmount:output_type -> assets.ResponseData
	18, // 54: assets.AssetsService.ConfirmWithdrawal:output_type -> assets.ResponseData
	18, // 55: assets.AssetsService.UpdateNewLabel:output_type -> assets.ResponseData
	18, // 56: assets.AssetsService.GetBalanceSummary:output_type -> assets.ResponseData
	18, // 57: assets.AssetsService.GetAssetDBList:output_type -> assets.ResponseData
	18, // 58: assets.AssetsService.GetUserAssetDB:output_type -> assets.ResponseData
	18, // 59: assets.AssetsService.GetAddressList:output_type -> assets.ResponseData
	18, // 60: assets.AssetsService.CountAddress:output_type -> assets.ResponseData
	18, // 61: assets.AssetsService.CheckHasCodeList:output_type -> assets.ResponseData
	18, // 62: assets.AssetsService.GetContactList:output_type -> assets.ResponseData
	18, // 63: assets.AssetsService.FilterTxCode:output_type -> assets.ResponseData
	18, // 64: assets.AssetsService.GetTxHistory:output_type -> assets.ResponseData
	18, // 65: assets.AssetsService.FilterAddressList:output_type -> assets.ResponseData
	18, // 66: assets.AssetsService.CheckAndCreateAccountToken:output_type -> assets.ResponseData
	18, // 67: assets.AssetsService.FetchRate:output_type -> assets.ResponseData
	18, // 68: assets.AssetsService.CheckAssetMatchWithUser:output_type -> assets.ResponseData
	18, // 69: assets.AssetsService.CheckAddressMatchWithUser:output_type -> assets.ResponseData
	18, // 70: assets.AssetsService.GetAddress:output_type -> assets.ResponseData
	18, // 71: assets.AssetsService.ConfirmAddressAction:output_type -> assets.ResponseData
	18, // 72: assets.AssetsService.CancelUrlCode:output_type -> assets.ResponseData
	45, // [45:73] is the sub-list for method output_type
	17, // [17:45] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_assets_proto_init() }
func file_assets_proto_init() {
	if File_assets_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_assets_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*OneStringRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_assets_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*OneIntegerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_assets_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*SendTradingDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_assets_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*ConfirmWithdrawalRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_assets_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateLabelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_assets_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*GetAddressListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_assets_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*GetCodeListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_assets_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*FilterTxHistoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_assets_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*ConfirmAmountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_assets_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*TransferAmountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_assets_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*GetUserAssetDBRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_assets_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*CountAddressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_assets_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*FilterTxCodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_assets_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*CheckAddressMatchWithUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_assets_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*CheckAndCreateAccountTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_assets_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*FilterAddressListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_assets_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*ConfirmAddressActionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_assets_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*CommonRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_assets_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*ResponseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_assets_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_assets_proto_goTypes,
		DependencyIndexes: file_assets_proto_depIdxs,
		MessageInfos:      file_assets_proto_msgTypes,
	}.Build()
	File_assets_proto = out.File
	file_assets_proto_rawDesc = nil
	file_assets_proto_goTypes = nil
	file_assets_proto_depIdxs = nil
}
